
Encoder_Test_401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e0c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007fac  08007fac  00008fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008054  08008054  0000a14c  2**0
                  CONTENTS
  4 .ARM          00000008  08008054  08008054  00009054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800805c  0800805c  0000a14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800805c  0800805c  0000905c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008060  08008060  00009060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  08008064  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001770  2000014c  080081b0  0000a14c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018bc  080081b0  0000a8bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127d4  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003206  00000000  00000000  0001c950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cee  00000000  00000000  00020c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c63  00000000  00000000  00021946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015253  00000000  00000000  0003a5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f238  00000000  00000000  0004f7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dea34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bc4  00000000  00000000  000dea78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000e363c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f94 	.word	0x08007f94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	08007f94 	.word	0x08007f94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fc23 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f86d 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fa2b 	bl	80009e8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000592:	f000 f8d5 	bl	8000740 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000596:	f000 f92b 	bl	80007f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800059a:	f000 f97d 	bl	8000898 <MX_TIM3_Init>
  MX_TIM4_Init();
 800059e:	f000 f9cf 	bl	8000940 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80005a2:	f006 fb31 	bl	8006c08 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80005a6:	213c      	movs	r1, #60	@ 0x3c
 80005a8:	4824      	ldr	r0, [pc, #144]	@ (800063c <main+0xbc>)
 80005aa:	f002 fe65 	bl	8003278 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80005ae:	213c      	movs	r1, #60	@ 0x3c
 80005b0:	4823      	ldr	r0, [pc, #140]	@ (8000640 <main+0xc0>)
 80005b2:	f002 fe61 	bl	8003278 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80005b6:	213c      	movs	r1, #60	@ 0x3c
 80005b8:	4822      	ldr	r0, [pc, #136]	@ (8000644 <main+0xc4>)
 80005ba:	f002 fe5d 	bl	8003278 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80005be:	213c      	movs	r1, #60	@ 0x3c
 80005c0:	4821      	ldr	r0, [pc, #132]	@ (8000648 <main+0xc8>)
 80005c2:	f002 fe59 	bl	8003278 <HAL_TIM_Encoder_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		for (int i = 0; i < 4; i++) {
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	e01f      	b.n	800060c <main+0x8c>
			sprintf(message , "%c%ld\r\n", 65+i, encoders[i].unwrapped_count);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f103 0141 	add.w	r1, r3, #65	@ 0x41
 80005d2:	481e      	ldr	r0, [pc, #120]	@ (800064c <main+0xcc>)
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	4613      	mov	r3, r2
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	4413      	add	r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4403      	add	r3, r0
 80005e0:	3308      	adds	r3, #8
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	460a      	mov	r2, r1
 80005e6:	491a      	ldr	r1, [pc, #104]	@ (8000650 <main+0xd0>)
 80005e8:	481a      	ldr	r0, [pc, #104]	@ (8000654 <main+0xd4>)
 80005ea:	f007 f833 	bl	8007654 <siprintf>
			CDC_Transmit_FS(message, strlen(message));
 80005ee:	4819      	ldr	r0, [pc, #100]	@ (8000654 <main+0xd4>)
 80005f0:	f7ff fdf6 	bl	80001e0 <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	4619      	mov	r1, r3
 80005fa:	4816      	ldr	r0, [pc, #88]	@ (8000654 <main+0xd4>)
 80005fc:	f006 fbd8 	bl	8006db0 <CDC_Transmit_FS>
			HAL_Delay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 fc57 	bl	8000eb4 <HAL_Delay>
		for (int i = 0; i < 4; i++) {
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3301      	adds	r3, #1
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b03      	cmp	r3, #3
 8000610:	dddc      	ble.n	80005cc <main+0x4c>
		}
		CDC_Transmit_FS("\n",1);
 8000612:	2101      	movs	r1, #1
 8000614:	4810      	ldr	r0, [pc, #64]	@ (8000658 <main+0xd8>)
 8000616:	f006 fbcb 	bl	8006db0 <CDC_Transmit_FS>
		sprintf(message , "L:%d , R:%d",pwm_value1 , pwm_value2 );
 800061a:	4b10      	ldr	r3, [pc, #64]	@ (800065c <main+0xdc>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <main+0xe0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4910      	ldr	r1, [pc, #64]	@ (8000664 <main+0xe4>)
 8000624:	480b      	ldr	r0, [pc, #44]	@ (8000654 <main+0xd4>)
 8000626:	f007 f815 	bl	8007654 <siprintf>
		CDC_Transmit_FS(message, sizeof(message));
 800062a:	2164      	movs	r1, #100	@ 0x64
 800062c:	4809      	ldr	r0, [pc, #36]	@ (8000654 <main+0xd4>)
 800062e:	f006 fbbf 	bl	8006db0 <CDC_Transmit_FS>
		HAL_Delay(1);
 8000632:	2001      	movs	r0, #1
 8000634:	f000 fc3e 	bl	8000eb4 <HAL_Delay>
		for (int i = 0; i < 4; i++) {
 8000638:	e7c5      	b.n	80005c6 <main+0x46>
 800063a:	bf00      	nop
 800063c:	200001b0 	.word	0x200001b0
 8000640:	20000168 	.word	0x20000168
 8000644:	20000240 	.word	0x20000240
 8000648:	200001f8 	.word	0x200001f8
 800064c:	20000358 	.word	0x20000358
 8000650:	08007fb0 	.word	0x08007fb0
 8000654:	200002ec 	.word	0x200002ec
 8000658:	08007fb8 	.word	0x08007fb8
 800065c:	20000350 	.word	0x20000350
 8000660:	20000354 	.word	0x20000354
 8000664:	08007fbc 	.word	0x08007fbc

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	@ 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f007 f80c 	bl	8007694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemClock_Config+0xd0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	4a28      	ldr	r2, [pc, #160]	@ (8000738 <SystemClock_Config+0xd0>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	@ 0x40
 800069c:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemClock_Config+0xd0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b23      	ldr	r3, [pc, #140]	@ (800073c <SystemClock_Config+0xd4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006b4:	4a21      	ldr	r2, [pc, #132]	@ (800073c <SystemClock_Config+0xd4>)
 80006b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <SystemClock_Config+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006dc:	2319      	movs	r3, #25
 80006de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ea:	2307      	movs	r3, #7
 80006ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 f8ea 	bl	80028cc <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006fe:	f000 f9a9 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2102      	movs	r1, #2
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fb4c 	bl	8002dbc <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800072a:	f000 f993 	bl	8000a54 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	@ 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	@ 0x30
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2224      	movs	r2, #36	@ 0x24
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f006 ffa0 	bl	8007694 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800075c:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <MX_TIM1_Init+0xa8>)
 800075e:	4a23      	ldr	r2, [pc, #140]	@ (80007ec <MX_TIM1_Init+0xac>)
 8000760:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000762:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <MX_TIM1_Init+0xa8>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_TIM1_Init+0xa8>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800076e:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <MX_TIM1_Init+0xa8>)
 8000770:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000774:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <MX_TIM1_Init+0xa8>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800077c:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_TIM1_Init+0xa8>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_TIM1_Init+0xa8>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000788:	2303      	movs	r3, #3
 800078a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000790:	2301      	movs	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007a0:	2301      	movs	r3, #1
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <MX_TIM1_Init+0xa8>)
 80007b4:	f002 fcba 	bl	800312c <HAL_TIM_Encoder_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80007be:	f000 f949 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	@ (80007e8 <MX_TIM1_Init+0xa8>)
 80007d0:	f002 fe92 	bl	80034f8 <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80007da:	f000 f93b 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3730      	adds	r7, #48	@ 0x30
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000168 	.word	0x20000168
 80007ec:	40010000 	.word	0x40010000

080007f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	2224      	movs	r2, #36	@ 0x24
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f006 ff48 	bl	8007694 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800080c:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_TIM2_Init+0xa4>)
 800080e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000812:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_TIM2_Init+0xa4>)
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_TIM2_Init+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_TIM2_Init+0xa4>)
 8000822:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000826:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_TIM2_Init+0xa4>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <MX_TIM2_Init+0xa4>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000834:	2303      	movs	r3, #3
 8000836:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800083c:	2301      	movs	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800084c:	2301      	movs	r3, #1
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	480d      	ldr	r0, [pc, #52]	@ (8000894 <MX_TIM2_Init+0xa4>)
 8000860:	f002 fc64 	bl	800312c <HAL_TIM_Encoder_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800086a:	f000 f8f3 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_TIM2_Init+0xa4>)
 800087c:	f002 fe3c 	bl	80034f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000886:	f000 f8e5 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3730      	adds	r7, #48	@ 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200001b0 	.word	0x200001b0

08000898 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	@ 0x30
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2224      	movs	r2, #36	@ 0x24
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f006 fef4 	bl	8007694 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008b4:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <MX_TIM3_Init+0xa0>)
 80008b6:	4a21      	ldr	r2, [pc, #132]	@ (800093c <MX_TIM3_Init+0xa4>)
 80008b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_TIM3_Init+0xa0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_TIM3_Init+0xa0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_TIM3_Init+0xa0>)
 80008c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_TIM3_Init+0xa0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_TIM3_Init+0xa0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008da:	2303      	movs	r3, #3
 80008dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008e2:	2301      	movs	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008f2:	2301      	movs	r3, #1
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4619      	mov	r1, r3
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <MX_TIM3_Init+0xa0>)
 8000906:	f002 fc11 	bl	800312c <HAL_TIM_Encoder_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000910:	f000 f8a0 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_TIM3_Init+0xa0>)
 8000922:	f002 fde9 	bl	80034f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800092c:	f000 f892 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	3730      	adds	r7, #48	@ 0x30
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200001f8 	.word	0x200001f8
 800093c:	40000400 	.word	0x40000400

08000940 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	@ 0x30
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2224      	movs	r2, #36	@ 0x24
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f006 fea0 	bl	8007694 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800095c:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <MX_TIM4_Init+0xa0>)
 800095e:	4a21      	ldr	r2, [pc, #132]	@ (80009e4 <MX_TIM4_Init+0xa4>)
 8000960:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000962:	4b1f      	ldr	r3, [pc, #124]	@ (80009e0 <MX_TIM4_Init+0xa0>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MX_TIM4_Init+0xa0>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_TIM4_Init+0xa0>)
 8000970:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000974:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_TIM4_Init+0xa0>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_TIM4_Init+0xa0>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000982:	2303      	movs	r3, #3
 8000984:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800098a:	2301      	movs	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800099a:	2301      	movs	r3, #1
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <MX_TIM4_Init+0xa0>)
 80009ae:	f002 fbbd 	bl	800312c <HAL_TIM_Encoder_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80009b8:	f000 f84c 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_TIM4_Init+0xa0>)
 80009ca:	f002 fd95 	bl	80034f8 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80009d4:	f000 f83e 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3730      	adds	r7, #48	@ 0x30
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000240 	.word	0x20000240
 80009e4:	40000800 	.word	0x40000800

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <MX_GPIO_Init+0x68>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a16      	ldr	r2, [pc, #88]	@ (8000a50 <MX_GPIO_Init+0x68>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_GPIO_Init+0x68>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <MX_GPIO_Init+0x68>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a0f      	ldr	r2, [pc, #60]	@ (8000a50 <MX_GPIO_Init+0x68>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <MX_GPIO_Init+0x68>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_GPIO_Init+0x68>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <MX_GPIO_Init+0x68>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_GPIO_Init+0x68>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <Error_Handler+0x8>

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a76:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	4a08      	ldr	r2, [pc, #32]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b090      	sub	sp, #64	@ 0x40
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a64      	ldr	r2, [pc, #400]	@ (8000c60 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d12d      	bne.n	8000b2e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ad6:	4b63      	ldr	r3, [pc, #396]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	4a62      	ldr	r2, [pc, #392]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae2:	4b60      	ldr	r3, [pc, #384]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000af2:	4b5c      	ldr	r3, [pc, #368]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a5b      	ldr	r2, [pc, #364]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b59      	ldr	r3, [pc, #356]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b24:	4619      	mov	r1, r3
 8000b26:	4850      	ldr	r0, [pc, #320]	@ (8000c68 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000b28:	f000 fafa 	bl	8001120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b2c:	e094      	b.n	8000c58 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM2)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b36:	d12c      	bne.n	8000b92 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
 8000b3c:	4b49      	ldr	r3, [pc, #292]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b40:	4a48      	ldr	r2, [pc, #288]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b48:	4b46      	ldr	r3, [pc, #280]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
 8000b52:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	4b42      	ldr	r3, [pc, #264]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5c:	4a41      	ldr	r2, [pc, #260]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b64:	4b3f      	ldr	r3, [pc, #252]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b70:	2303      	movs	r3, #3
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b80:	2301      	movs	r3, #1
 8000b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4837      	ldr	r0, [pc, #220]	@ (8000c68 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000b8c:	f000 fac8 	bl	8001120 <HAL_GPIO_Init>
}
 8000b90:	e062      	b.n	8000c58 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a35      	ldr	r2, [pc, #212]	@ (8000c6c <HAL_TIM_Encoder_MspInit+0x1bc>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d12c      	bne.n	8000bf6 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	4b30      	ldr	r3, [pc, #192]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bac:	4b2d      	ldr	r3, [pc, #180]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	4a28      	ldr	r2, [pc, #160]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc8:	4b26      	ldr	r3, [pc, #152]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd4:	23c0      	movs	r3, #192	@ 0xc0
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000be4:	2302      	movs	r3, #2
 8000be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bec:	4619      	mov	r1, r3
 8000bee:	481e      	ldr	r0, [pc, #120]	@ (8000c68 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000bf0:	f000 fa96 	bl	8001120 <HAL_GPIO_Init>
}
 8000bf4:	e030      	b.n	8000c58 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM4)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8000c70 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d12b      	bne.n	8000c58 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	4a16      	ldr	r2, [pc, #88]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c24:	4a0f      	ldr	r2, [pc, #60]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c38:	23c0      	movs	r3, #192	@ 0xc0
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c50:	4619      	mov	r1, r3
 8000c52:	4808      	ldr	r0, [pc, #32]	@ (8000c74 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000c54:	f000 fa64 	bl	8001120 <HAL_GPIO_Init>
}
 8000c58:	bf00      	nop
 8000c5a:	3740      	adds	r7, #64	@ 0x40
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40010000 	.word	0x40010000
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40000400 	.word	0x40000400
 8000c70:	40000800 	.word	0x40000800
 8000c74:	40020400 	.word	0x40020400

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <NMI_Handler+0x4>

08000c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <MemManage_Handler+0x4>

08000c90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <UsageFault_Handler+0x4>

08000ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cce:	f000 f8d1 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <OTG_FS_IRQHandler+0x10>)
 8000cde:	f000 fce7 	bl	80016b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20001070 	.word	0x20001070

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf4:	4a14      	ldr	r2, [pc, #80]	@ (8000d48 <_sbrk+0x5c>)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <_sbrk+0x60>)
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d00:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <_sbrk+0x64>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	@ (8000d54 <_sbrk+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d1c:	f006 fcc2 	bl	80076a4 <__errno>
 8000d20:	4603      	mov	r3, r0
 8000d22:	220c      	movs	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	e009      	b.n	8000d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d32:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <_sbrk+0x64>)
 8000d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20010000 	.word	0x20010000
 8000d4c:	00000400 	.word	0x00000400
 8000d50:	20000388 	.word	0x20000388
 8000d54:	200018c0 	.word	0x200018c0

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	@ (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d80:	f7ff ffea 	bl	8000d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d84:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d86:	490d      	ldr	r1, [pc, #52]	@ (8000dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d88:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000daa:	f006 fc81 	bl	80076b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fbe7 	bl	8000580 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000dc0:	08008064 	.word	0x08008064
  ldr r2, =_sbss
 8000dc4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000dc8:	200018bc 	.word	0x200018bc

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e10 <HAL_Init+0x40>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <HAL_Init+0x40>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	@ (8000e10 <HAL_Init+0x40>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f94f 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff fe2c 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f967 	bl	8001106 <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f92f 	bl	80010b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	@ (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	2000038c 	.word	0x2000038c

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	2000038c 	.word	0x2000038c

08000eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff ffee 	bl	8000e9c <HAL_GetTick>
 8000ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ecc:	d005      	beq.n	8000eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_Delay+0x44>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eda:	bf00      	nop
 8000edc:	f7ff ffde 	bl	8000e9c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <HAL_Delay+0x28>
  {
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	@ (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	@ (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	@ (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	@ 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	@ 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff29 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff3e 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff8e 	bl	8000ff0 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5d 	bl	8000f9c <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff31 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffa2 	bl	8001058 <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	@ 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e159      	b.n	80013f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 8148 	bne.w	80013ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d005      	beq.n	8001172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116e:	2b02      	cmp	r3, #2
 8001170:	d130      	bne.n	80011d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	f003 0201 	and.w	r2, r3, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d017      	beq.n	8001210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d123      	bne.n	8001264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	69b9      	ldr	r1, [r7, #24]
 8001260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0203 	and.w	r2, r3, #3
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80a2 	beq.w	80013ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b57      	ldr	r3, [pc, #348]	@ (8001408 <HAL_GPIO_Init+0x2e8>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a56      	ldr	r2, [pc, #344]	@ (8001408 <HAL_GPIO_Init+0x2e8>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b6:	4b54      	ldr	r3, [pc, #336]	@ (8001408 <HAL_GPIO_Init+0x2e8>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c2:	4a52      	ldr	r2, [pc, #328]	@ (800140c <HAL_GPIO_Init+0x2ec>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a49      	ldr	r2, [pc, #292]	@ (8001410 <HAL_GPIO_Init+0x2f0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d019      	beq.n	8001322 <HAL_GPIO_Init+0x202>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a48      	ldr	r2, [pc, #288]	@ (8001414 <HAL_GPIO_Init+0x2f4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x1fe>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a47      	ldr	r2, [pc, #284]	@ (8001418 <HAL_GPIO_Init+0x2f8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x1fa>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a46      	ldr	r2, [pc, #280]	@ (800141c <HAL_GPIO_Init+0x2fc>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x1f6>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a45      	ldr	r2, [pc, #276]	@ (8001420 <HAL_GPIO_Init+0x300>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x1f2>
 800130e:	2304      	movs	r3, #4
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001312:	2307      	movs	r3, #7
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x204>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x204>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001322:	2300      	movs	r3, #0
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001334:	4935      	ldr	r1, [pc, #212]	@ (800140c <HAL_GPIO_Init+0x2ec>)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b38      	ldr	r3, [pc, #224]	@ (8001424 <HAL_GPIO_Init+0x304>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a2f      	ldr	r2, [pc, #188]	@ (8001424 <HAL_GPIO_Init+0x304>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b2d      	ldr	r3, [pc, #180]	@ (8001424 <HAL_GPIO_Init+0x304>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a24      	ldr	r2, [pc, #144]	@ (8001424 <HAL_GPIO_Init+0x304>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001396:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <HAL_GPIO_Init+0x304>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001424 <HAL_GPIO_Init+0x304>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c0:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <HAL_GPIO_Init+0x304>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001424 <HAL_GPIO_Init+0x304>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	f67f aea2 	bls.w	800113c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	@ 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40013c00 	.word	0x40013c00

08001428 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af02      	add	r7, sp, #8
 800142e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e101      	b.n	800163e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d106      	bne.n	800145a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f005 fdf3 	bl	8007040 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2203      	movs	r2, #3
 800145e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001468:	d102      	bne.n	8001470 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f002 f9c4 	bl	8003802 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7c1a      	ldrb	r2, [r3, #16]
 8001482:	f88d 2000 	strb.w	r2, [sp]
 8001486:	3304      	adds	r3, #4
 8001488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148a:	f002 f8a3 	bl	80035d4 <USB_CoreInit>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0ce      	b.n	800163e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 f9bc 	bl	8003824 <USB_SetCurrentMode>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2202      	movs	r2, #2
 80014b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e0bf      	b.n	800163e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	e04a      	b.n	800155a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	3315      	adds	r3, #21
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	3314      	adds	r3, #20
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	b298      	uxth	r0, r3
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	332e      	adds	r3, #46	@ 0x2e
 8001500:	4602      	mov	r2, r0
 8001502:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	3318      	adds	r3, #24
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	331c      	adds	r3, #28
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	3320      	adds	r3, #32
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4413      	add	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	3324      	adds	r3, #36	@ 0x24
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	3301      	adds	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	791b      	ldrb	r3, [r3, #4]
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	429a      	cmp	r2, r3
 8001562:	d3af      	bcc.n	80014c4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e044      	b.n	80015f4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4413      	add	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	3301      	adds	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	791b      	ldrb	r3, [r3, #4]
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d3b5      	bcc.n	800156a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7c1a      	ldrb	r2, [r3, #16]
 8001606:	f88d 2000 	strb.w	r2, [sp]
 800160a:	3304      	adds	r3, #4
 800160c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160e:	f002 f955 	bl	80038bc <USB_DevInit>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e00c      	b.n	800163e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f003 f99f 	bl	800497a <USB_DevDisconnect>

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_PCD_Start+0x1c>
 800165e:	2302      	movs	r3, #2
 8001660:	e022      	b.n	80016a8 <HAL_PCD_Start+0x62>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001672:	2b00      	cmp	r3, #0
 8001674:	d009      	beq.n	800168a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800167a:	2b01      	cmp	r3, #1
 800167c:	d105      	bne.n	800168a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001682:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f002 f8a6 	bl	80037e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f003 f94d 	bl	8004938 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b08d      	sub	sp, #52	@ 0x34
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 fa0b 	bl	8004ae2 <USB_GetMode>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 848c 	bne.w	8001fec <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f003 f96f 	bl	80049bc <USB_ReadInterrupts>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 8482 	beq.w	8001fea <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 f95c 	bl	80049bc <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b02      	cmp	r3, #2
 800170c:	d107      	bne.n	800171e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	695a      	ldr	r2, [r3, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f002 0202 	and.w	r2, r2, #2
 800171c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f003 f94a 	bl	80049bc <USB_ReadInterrupts>
 8001728:	4603      	mov	r3, r0
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b10      	cmp	r3, #16
 8001730:	d161      	bne.n	80017f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699a      	ldr	r2, [r3, #24]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0210 	bic.w	r2, r2, #16
 8001740:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	f003 020f 	and.w	r2, r3, #15
 800174e:	4613      	mov	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	3304      	adds	r3, #4
 8001760:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	0c5b      	lsrs	r3, r3, #17
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	2b02      	cmp	r3, #2
 800176c:	d124      	bne.n	80017b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001774:	4013      	ands	r3, r2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d035      	beq.n	80017e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001788:	b29b      	uxth	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	6a38      	ldr	r0, [r7, #32]
 800178e:	f002 ff81 	bl	8004694 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800179e:	441a      	add	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017b0:	441a      	add	r2, r3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	615a      	str	r2, [r3, #20]
 80017b6:	e016      	b.n	80017e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	0c5b      	lsrs	r3, r3, #17
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	2b06      	cmp	r3, #6
 80017c2:	d110      	bne.n	80017e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80017ca:	2208      	movs	r2, #8
 80017cc:	4619      	mov	r1, r3
 80017ce:	6a38      	ldr	r0, [r7, #32]
 80017d0:	f002 ff60 	bl	8004694 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	091b      	lsrs	r3, r3, #4
 80017dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017e0:	441a      	add	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699a      	ldr	r2, [r3, #24]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0210 	orr.w	r2, r2, #16
 80017f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 f8de 	bl	80049bc <USB_ReadInterrupts>
 8001800:	4603      	mov	r3, r0
 8001802:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001806:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800180a:	f040 80a7 	bne.w	800195c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f003 f8e3 	bl	80049e2 <USB_ReadDevAllOutEpInterrupt>
 800181c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800181e:	e099      	b.n	8001954 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 808e 	beq.w	8001948 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f003 f907 	bl	8004a4a <USB_ReadDevOutEPInterrupt>
 800183c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00c      	beq.n	8001862 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	015a      	lsls	r2, r3, #5
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	4413      	add	r3, r2
 8001850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001854:	461a      	mov	r2, r3
 8001856:	2301      	movs	r3, #1
 8001858:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800185a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 fea3 	bl	80025a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00c      	beq.n	8001886 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	015a      	lsls	r2, r3, #5
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	4413      	add	r3, r2
 8001874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001878:	461a      	mov	r2, r3
 800187a:	2308      	movs	r3, #8
 800187c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800187e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 ff79 	bl	8002778 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	015a      	lsls	r2, r3, #5
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	4413      	add	r3, r2
 8001898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800189c:	461a      	mov	r2, r3
 800189e:	2310      	movs	r3, #16
 80018a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d030      	beq.n	800190e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018b4:	2b80      	cmp	r3, #128	@ 0x80
 80018b6:	d109      	bne.n	80018cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	3304      	adds	r3, #4
 80018e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	78db      	ldrb	r3, [r3, #3]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d108      	bne.n	80018fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2200      	movs	r2, #0
 80018ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4619      	mov	r1, r3
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f005 fc9e 	bl	8007238 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	015a      	lsls	r2, r3, #5
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	4413      	add	r3, r2
 8001904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001908:	461a      	mov	r2, r3
 800190a:	2302      	movs	r3, #2
 800190c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f003 0320 	and.w	r3, r3, #32
 8001914:	2b00      	cmp	r3, #0
 8001916:	d008      	beq.n	800192a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	015a      	lsls	r2, r3, #5
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	4413      	add	r3, r2
 8001920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001924:	461a      	mov	r2, r3
 8001926:	2320      	movs	r3, #32
 8001928:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d009      	beq.n	8001948 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001940:	461a      	mov	r2, r3
 8001942:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001946:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	3301      	adds	r3, #1
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800194e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001956:	2b00      	cmp	r3, #0
 8001958:	f47f af62 	bne.w	8001820 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f003 f82b 	bl	80049bc <USB_ReadInterrupts>
 8001966:	4603      	mov	r3, r0
 8001968:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800196c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001970:	f040 80db 	bne.w	8001b2a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f003 f84c 	bl	8004a16 <USB_ReadDevAllInEpInterrupt>
 800197e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001984:	e0cd      	b.n	8001b22 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80c2 	beq.w	8001b16 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f003 f872 	bl	8004a86 <USB_ReadDevInEPInterrupt>
 80019a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d057      	beq.n	8001a5e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	2201      	movs	r2, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69f9      	ldr	r1, [r7, #28]
 80019ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80019ce:	4013      	ands	r3, r2
 80019d0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	015a      	lsls	r2, r3, #5
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	4413      	add	r3, r2
 80019da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019de:	461a      	mov	r2, r3
 80019e0:	2301      	movs	r3, #1
 80019e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	799b      	ldrb	r3, [r3, #6]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d132      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019f0:	4613      	mov	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	3320      	adds	r3, #32
 80019fc:	6819      	ldr	r1, [r3, #0]
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a02:	4613      	mov	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4403      	add	r3, r0
 8001a0c:	331c      	adds	r3, #28
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4419      	add	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4403      	add	r3, r0
 8001a20:	3320      	adds	r3, #32
 8001a22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d113      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x3a2>
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3324      	adds	r3, #36	@ 0x24
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d108      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	f003 f879 	bl	8004b44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f005 fb72 	bl	8007142 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	015a      	lsls	r2, r3, #5
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a74:	461a      	mov	r2, r3
 8001a76:	2308      	movs	r3, #8
 8001a78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	015a      	lsls	r2, r3, #5
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a90:	461a      	mov	r2, r3
 8001a92:	2310      	movs	r3, #16
 8001a94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001aac:	461a      	mov	r2, r3
 8001aae:	2340      	movs	r3, #64	@ 0x40
 8001ab0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d023      	beq.n	8001b04 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001abe:	6a38      	ldr	r0, [r7, #32]
 8001ac0:	f002 f860 	bl	8003b84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	3310      	adds	r3, #16
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	78db      	ldrb	r3, [r3, #3]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	4619      	mov	r1, r3
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f005 fbb5 	bl	800725c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001afe:	461a      	mov	r2, r3
 8001b00:	2302      	movs	r3, #2
 8001b02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fcbd 	bl	8002490 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	3301      	adds	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b1e:	085b      	lsrs	r3, r3, #1
 8001b20:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f47f af2e 	bne.w	8001986 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 ff44 	bl	80049bc <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b3e:	d122      	bne.n	8001b86 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b66:	2100      	movs	r1, #0
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 fea3 	bl	80028b4 <HAL_PCDEx_LPM_Callback>
 8001b6e:	e002      	b.n	8001b76 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f005 fb53 	bl	800721c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 ff16 	bl	80049bc <USB_ReadInterrupts>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b9a:	d112      	bne.n	8001bc2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d102      	bne.n	8001bb2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f005 fb0f 	bl	80071d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001bc0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f002 fef8 	bl	80049bc <USB_ReadInterrupts>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bd6:	f040 80b7 	bne.w	8001d48 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2110      	movs	r1, #16
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f001 ffc5 	bl	8003b84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bfe:	e046      	b.n	8001c8e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c02:	015a      	lsls	r2, r3, #5
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	4413      	add	r3, r2
 8001c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c16:	015a      	lsls	r2, r3, #5
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c24:	0151      	lsls	r1, r2, #5
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	440a      	add	r2, r1
 8001c2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001c2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c40:	461a      	mov	r2, r3
 8001c42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c4a:	015a      	lsls	r2, r3, #5
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	4413      	add	r3, r2
 8001c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c58:	0151      	lsls	r1, r2, #5
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	440a      	add	r2, r1
 8001c5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c78:	0151      	lsls	r1, r2, #5
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	440a      	add	r2, r1
 8001c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	791b      	ldrb	r3, [r3, #4]
 8001c92:	461a      	mov	r2, r3
 8001c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d3b2      	bcc.n	8001c00 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ca8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001cac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7bdb      	ldrb	r3, [r3, #15]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d016      	beq.n	8001ce4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cc6:	f043 030b 	orr.w	r3, r3, #11
 8001cca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cdc:	f043 030b 	orr.w	r3, r3, #11
 8001ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce2:	e015      	b.n	8001d10 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cf2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cf6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001cfa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d0a:	f043 030b 	orr.w	r3, r3, #11
 8001d0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001d22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d32:	461a      	mov	r2, r3
 8001d34:	f002 ff06 	bl	8004b44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001d46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 fe35 	bl	80049bc <USB_ReadInterrupts>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d5c:	d123      	bne.n	8001da6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 fecb 	bl	8004afe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f001 ff82 	bl	8003c76 <USB_GetDevSpeed>
 8001d72:	4603      	mov	r3, r0
 8001d74:	461a      	mov	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681c      	ldr	r4, [r3, #0]
 8001d7e:	f001 f9c9 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8001d82:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f001 fc86 	bl	800369c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f005 f9fe 	bl	8007192 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 fe06 	bl	80049bc <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d10a      	bne.n	8001dd0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f005 f9db 	bl	8007176 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f002 0208 	and.w	r2, r2, #8
 8001dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 fdf1 	bl	80049bc <USB_ReadInterrupts>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de0:	2b80      	cmp	r3, #128	@ 0x80
 8001de2:	d123      	bne.n	8001e2c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001df0:	2301      	movs	r3, #1
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df4:	e014      	b.n	8001e20 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d105      	bne.n	8001e1a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4619      	mov	r1, r3
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fb0a 	bl	800242e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	791b      	ldrb	r3, [r3, #4]
 8001e24:	461a      	mov	r2, r3
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d3e4      	bcc.n	8001df6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f002 fdc3 	bl	80049bc <USB_ReadInterrupts>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e40:	d13c      	bne.n	8001ebc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e42:	2301      	movs	r3, #1
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e46:	e02b      	b.n	8001ea0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	3318      	adds	r3, #24
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d115      	bne.n	8001e9a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	da12      	bge.n	8001e9a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3317      	adds	r3, #23
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	4619      	mov	r1, r3
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 faca 	bl	800242e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	791b      	ldrb	r3, [r3, #4]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d3cd      	bcc.n	8001e48 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 fd7b 	bl	80049bc <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ecc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ed0:	d156      	bne.n	8001f80 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed6:	e045      	b.n	8001f64 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d12e      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da2b      	bge.n	8001f5e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001f12:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d121      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10a      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f5a:	6053      	str	r3, [r2, #4]
            break;
 8001f5c:	e008      	b.n	8001f70 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	3301      	adds	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	791b      	ldrb	r3, [r3, #4]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d3b3      	bcc.n	8001ed8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 fd19 	bl	80049bc <USB_ReadInterrupts>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f94:	d10a      	bne.n	8001fac <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f005 f972 	bl	8007280 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 fd03 	bl	80049bc <USB_ReadInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d115      	bne.n	8001fec <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f005 f962 	bl	800729c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6859      	ldr	r1, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	e000      	b.n	8001fec <HAL_PCD_IRQHandler+0x93c>
      return;
 8001fea:	bf00      	nop
    }
  }
}
 8001fec:	3734      	adds	r7, #52	@ 0x34
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}

08001ff2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_PCD_SetAddress+0x1a>
 8002008:	2302      	movs	r3, #2
 800200a:	e012      	b.n	8002032 <HAL_PCD_SetAddress+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f002 fc62 	bl	80048ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	4608      	mov	r0, r1
 8002044:	4611      	mov	r1, r2
 8002046:	461a      	mov	r2, r3
 8002048:	4603      	mov	r3, r0
 800204a:	70fb      	strb	r3, [r7, #3]
 800204c:	460b      	mov	r3, r1
 800204e:	803b      	strh	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800205c:	2b00      	cmp	r3, #0
 800205e:	da0f      	bge.n	8002080 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3310      	adds	r3, #16
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	3304      	adds	r3, #4
 8002076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	705a      	strb	r2, [r3, #1]
 800207e:	e00f      	b.n	80020a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 020f 	and.w	r2, r3, #15
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	3304      	adds	r3, #4
 8002098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80020ac:	883b      	ldrh	r3, [r7, #0]
 80020ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	78ba      	ldrb	r2, [r7, #2]
 80020ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	785b      	ldrb	r3, [r3, #1]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d004      	beq.n	80020ce <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020ce:	78bb      	ldrb	r3, [r7, #2]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d102      	bne.n	80020da <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_PCD_EP_Open+0xae>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e00e      	b.n	8002106 <HAL_PCD_EP_Open+0xcc>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68f9      	ldr	r1, [r7, #12]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 fde2 	bl	8003cc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002104:	7afb      	ldrb	r3, [r7, #11]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800211a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800211e:	2b00      	cmp	r3, #0
 8002120:	da0f      	bge.n	8002142 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	f003 020f 	and.w	r2, r3, #15
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	3310      	adds	r3, #16
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	3304      	adds	r3, #4
 8002138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	705a      	strb	r2, [r3, #1]
 8002140:	e00f      	b.n	8002162 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	f003 020f 	and.w	r2, r3, #15
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	4413      	add	r3, r2
 8002158:	3304      	adds	r3, #4
 800215a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	b2da      	uxtb	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_PCD_EP_Close+0x6e>
 8002178:	2302      	movs	r3, #2
 800217a:	e00e      	b.n	800219a <HAL_PCD_EP_Close+0x8c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68f9      	ldr	r1, [r7, #12]
 800218a:	4618      	mov	r0, r3
 800218c:	f001 fe20 	bl	8003dd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	460b      	mov	r3, r1
 80021b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b2:	7afb      	ldrb	r3, [r7, #11]
 80021b4:	f003 020f 	and.w	r2, r3, #15
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	3304      	adds	r3, #4
 80021ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2200      	movs	r2, #0
 80021e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e4:	7afb      	ldrb	r3, [r7, #11]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	799b      	ldrb	r3, [r3, #6]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d102      	bne.n	80021fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	799b      	ldrb	r3, [r3, #6]
 8002206:	461a      	mov	r2, r3
 8002208:	6979      	ldr	r1, [r7, #20]
 800220a:	f001 febd 	bl	8003f88 <USB_EPStartXfer>

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 020f 	and.w	r2, r3, #15
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	460b      	mov	r3, r1
 8002256:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002258:	7afb      	ldrb	r3, [r7, #11]
 800225a:	f003 020f 	and.w	r2, r3, #15
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	3310      	adds	r3, #16
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	3304      	adds	r3, #4
 800226e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2200      	movs	r2, #0
 8002280:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2201      	movs	r2, #1
 8002286:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002288:	7afb      	ldrb	r3, [r7, #11]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	b2da      	uxtb	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	799b      	ldrb	r3, [r3, #6]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d102      	bne.n	80022a2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	799b      	ldrb	r3, [r3, #6]
 80022aa:	461a      	mov	r2, r3
 80022ac:	6979      	ldr	r1, [r7, #20]
 80022ae:	f001 fe6b 	bl	8003f88 <USB_EPStartXfer>

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	7912      	ldrb	r2, [r2, #4]
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e04f      	b.n	800237a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da0f      	bge.n	8002302 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	f003 020f 	and.w	r2, r3, #15
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	3310      	adds	r3, #16
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	3304      	adds	r3, #4
 80022f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	705a      	strb	r2, [r3, #1]
 8002300:	e00d      	b.n	800231e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	3304      	adds	r3, #4
 8002316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	b2da      	uxtb	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_PCD_EP_SetStall+0x82>
 800233a:	2302      	movs	r3, #2
 800233c:	e01d      	b.n	800237a <HAL_PCD_EP_SetStall+0xbe>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68f9      	ldr	r1, [r7, #12]
 800234c:	4618      	mov	r0, r3
 800234e:	f002 f9f9 	bl	8004744 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7999      	ldrb	r1, [r3, #6]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800236a:	461a      	mov	r2, r3
 800236c:	f002 fbea 	bl	8004b44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	7912      	ldrb	r2, [r2, #4]
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e042      	b.n	8002426 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	da0f      	bge.n	80023c8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	f003 020f 	and.w	r2, r3, #15
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	3310      	adds	r3, #16
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	3304      	adds	r3, #4
 80023be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	705a      	strb	r2, [r3, #1]
 80023c6:	e00f      	b.n	80023e8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f003 020f 	and.w	r2, r3, #15
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	3304      	adds	r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_PCD_EP_ClrStall+0x86>
 8002404:	2302      	movs	r3, #2
 8002406:	e00e      	b.n	8002426 <HAL_PCD_EP_ClrStall+0xa4>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68f9      	ldr	r1, [r7, #12]
 8002416:	4618      	mov	r0, r3
 8002418:	f002 fa02 	bl	8004820 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800243a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800243e:	2b00      	cmp	r3, #0
 8002440:	da0c      	bge.n	800245c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 020f 	and.w	r2, r3, #15
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	3310      	adds	r3, #16
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	3304      	adds	r3, #4
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e00c      	b.n	8002476 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	f003 020f 	and.w	r2, r3, #15
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	3304      	adds	r3, #4
 8002474:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68f9      	ldr	r1, [r7, #12]
 800247c:	4618      	mov	r0, r3
 800247e:	f002 f821 	bl	80044c4 <USB_EPStopXfer>
 8002482:	4603      	mov	r3, r0
 8002484:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002486:	7afb      	ldrb	r3, [r7, #11]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	@ 0x28
 8002494:	af02      	add	r7, sp, #8
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	3310      	adds	r3, #16
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	3304      	adds	r3, #4
 80024b6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d901      	bls.n	80024c8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e06b      	b.n	80025a0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d902      	bls.n	80024e4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	3303      	adds	r3, #3
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024ec:	e02a      	b.n	8002544 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	429a      	cmp	r2, r3
 8002502:	d902      	bls.n	800250a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3303      	adds	r3, #3
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68d9      	ldr	r1, [r3, #12]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	4603      	mov	r3, r0
 8002526:	6978      	ldr	r0, [r7, #20]
 8002528:	f002 f876 	bl	8004618 <USB_WritePacket>

    ep->xfer_buff  += len;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	441a      	add	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	441a      	add	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4413      	add	r3, r2
 800254c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	429a      	cmp	r2, r3
 8002558:	d809      	bhi.n	800256e <PCD_WriteEmptyTxFifo+0xde>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002562:	429a      	cmp	r2, r3
 8002564:	d203      	bcs.n	800256e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1bf      	bne.n	80024ee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	429a      	cmp	r2, r3
 8002578:	d811      	bhi.n	800259e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	2201      	movs	r2, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800258e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	43db      	mvns	r3, r3
 8002594:	6939      	ldr	r1, [r7, #16]
 8002596:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800259a:	4013      	ands	r3, r2
 800259c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	333c      	adds	r3, #60	@ 0x3c
 80025c0:	3304      	adds	r3, #4
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	799b      	ldrb	r3, [r3, #6]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d17b      	bne.n	80026d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d015      	beq.n	8002614 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	4a61      	ldr	r2, [pc, #388]	@ (8002770 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	f240 80b9 	bls.w	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80b3 	beq.w	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	4413      	add	r3, r2
 8002606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800260a:	461a      	mov	r2, r3
 800260c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002610:	6093      	str	r3, [r2, #8]
 8002612:	e0a7      	b.n	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4413      	add	r3, r2
 8002626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800262a:	461a      	mov	r2, r3
 800262c:	2320      	movs	r3, #32
 800262e:	6093      	str	r3, [r2, #8]
 8002630:	e098      	b.n	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	f040 8093 	bne.w	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	4a4b      	ldr	r2, [pc, #300]	@ (8002770 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d90f      	bls.n	8002666 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800265c:	461a      	mov	r2, r3
 800265e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002662:	6093      	str	r3, [r2, #8]
 8002664:	e07e      	b.n	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a1a      	ldr	r2, [r3, #32]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	0159      	lsls	r1, r3, #5
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	440b      	add	r3, r1
 8002688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002692:	1ad2      	subs	r2, r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d114      	bne.n	80026c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026b0:	461a      	mov	r2, r3
 80026b2:	2101      	movs	r1, #1
 80026b4:	f002 fa46 	bl	8004b44 <USB_EP0_OutStart>
 80026b8:	e006      	b.n	80026c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	441a      	add	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	4619      	mov	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f004 fd1c 	bl	800710c <HAL_PCD_DataOutStageCallback>
 80026d4:	e046      	b.n	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	4a26      	ldr	r2, [pc, #152]	@ (8002774 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d124      	bne.n	8002728 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026f4:	461a      	mov	r2, r3
 80026f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026fa:	6093      	str	r3, [r2, #8]
 80026fc:	e032      	b.n	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002714:	461a      	mov	r2, r3
 8002716:	2320      	movs	r3, #32
 8002718:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	4619      	mov	r1, r3
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f004 fcf3 	bl	800710c <HAL_PCD_DataOutStageCallback>
 8002726:	e01d      	b.n	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d114      	bne.n	8002758 <PCD_EP_OutXfrComplete_int+0x1b0>
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d108      	bne.n	8002758 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002750:	461a      	mov	r2, r3
 8002752:	2100      	movs	r1, #0
 8002754:	f002 f9f6 	bl	8004b44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f004 fcd4 	bl	800710c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	4f54300a 	.word	0x4f54300a
 8002774:	4f54310a 	.word	0x4f54310a

08002778 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	333c      	adds	r3, #60	@ 0x3c
 8002790:	3304      	adds	r3, #4
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4a15      	ldr	r2, [pc, #84]	@ (8002800 <PCD_EP_OutSetupPacket_int+0x88>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d90e      	bls.n	80027cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d009      	beq.n	80027cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c4:	461a      	mov	r2, r3
 80027c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f004 fc8b 	bl	80070e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <PCD_EP_OutSetupPacket_int+0x88>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d90c      	bls.n	80027f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	799b      	ldrb	r3, [r3, #6]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d108      	bne.n	80027f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027ec:	461a      	mov	r2, r3
 80027ee:	2101      	movs	r1, #1
 80027f0:	f002 f9a8 	bl	8004b44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	4f54300a 	.word	0x4f54300a

08002804 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	70fb      	strb	r3, [r7, #3]
 8002810:	4613      	mov	r3, r2
 8002812:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d107      	bne.n	8002832 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002822:	883b      	ldrh	r3, [r7, #0]
 8002824:	0419      	lsls	r1, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	430a      	orrs	r2, r1
 800282e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002830:	e028      	b.n	8002884 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	4413      	add	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e00d      	b.n	8002862 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	3340      	adds	r3, #64	@ 0x40
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	4413      	add	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	3301      	adds	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	3b01      	subs	r3, #1
 8002868:	429a      	cmp	r2, r3
 800286a:	d3ec      	bcc.n	8002846 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800286c:	883b      	ldrh	r3, [r7, #0]
 800286e:	0418      	lsls	r0, r3, #16
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	3b01      	subs	r3, #1
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	4302      	orrs	r2, r0
 800287c:	3340      	adds	r3, #64	@ 0x40
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e267      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d075      	beq.n	80029d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028ea:	4b88      	ldr	r3, [pc, #544]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d00c      	beq.n	8002910 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f6:	4b85      	ldr	r3, [pc, #532]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d112      	bne.n	8002928 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002902:	4b82      	ldr	r3, [pc, #520]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800290a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800290e:	d10b      	bne.n	8002928 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	4b7e      	ldr	r3, [pc, #504]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d05b      	beq.n	80029d4 <HAL_RCC_OscConfig+0x108>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d157      	bne.n	80029d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e242      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002930:	d106      	bne.n	8002940 <HAL_RCC_OscConfig+0x74>
 8002932:	4b76      	ldr	r3, [pc, #472]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a75      	ldr	r2, [pc, #468]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e01d      	b.n	800297c <HAL_RCC_OscConfig+0xb0>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x98>
 800294a:	4b70      	ldr	r3, [pc, #448]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a6f      	ldr	r2, [pc, #444]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b6d      	ldr	r3, [pc, #436]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a6c      	ldr	r2, [pc, #432]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0xb0>
 8002964:	4b69      	ldr	r3, [pc, #420]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a68      	ldr	r2, [pc, #416]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 800296a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b66      	ldr	r3, [pc, #408]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a65      	ldr	r2, [pc, #404]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800297a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d013      	beq.n	80029ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe fa8a 	bl	8000e9c <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe fa86 	bl	8000e9c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	@ 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e207      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0xc0>
 80029aa:	e014      	b.n	80029d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fa76 	bl	8000e9c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe fa72 	bl	8000e9c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	@ 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e1f3      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c6:	4b51      	ldr	r3, [pc, #324]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0xe8>
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d063      	beq.n	8002aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029e2:	4b4a      	ldr	r3, [pc, #296]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ee:	4b47      	ldr	r3, [pc, #284]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d11c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029fa:	4b44      	ldr	r3, [pc, #272]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d116      	bne.n	8002a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a06:	4b41      	ldr	r3, [pc, #260]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_RCC_OscConfig+0x152>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e1c7      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4937      	ldr	r1, [pc, #220]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a32:	e03a      	b.n	8002aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d020      	beq.n	8002a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a3c:	4b34      	ldr	r3, [pc, #208]	@ (8002b10 <HAL_RCC_OscConfig+0x244>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe fa2b 	bl	8000e9c <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4a:	f7fe fa27 	bl	8000e9c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e1a8      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a68:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4925      	ldr	r1, [pc, #148]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]
 8002a7c:	e015      	b.n	8002aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7e:	4b24      	ldr	r3, [pc, #144]	@ (8002b10 <HAL_RCC_OscConfig+0x244>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe fa0a 	bl	8000e9c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a8c:	f7fe fa06 	bl	8000e9c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e187      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d036      	beq.n	8002b24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d016      	beq.n	8002aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002abe:	4b15      	ldr	r3, [pc, #84]	@ (8002b14 <HAL_RCC_OscConfig+0x248>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fe f9ea 	bl	8000e9c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002acc:	f7fe f9e6 	bl	8000e9c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e167      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ade:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_RCC_OscConfig+0x240>)
 8002ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x200>
 8002aea:	e01b      	b.n	8002b24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aec:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <HAL_RCC_OscConfig+0x248>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af2:	f7fe f9d3 	bl	8000e9c <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af8:	e00e      	b.n	8002b18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afa:	f7fe f9cf 	bl	8000e9c <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d907      	bls.n	8002b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e150      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	42470000 	.word	0x42470000
 8002b14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b18:	4b88      	ldr	r3, [pc, #544]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1ea      	bne.n	8002afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 8097 	beq.w	8002c60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b36:	4b81      	ldr	r3, [pc, #516]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10f      	bne.n	8002b62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	4b7d      	ldr	r3, [pc, #500]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	4a7c      	ldr	r2, [pc, #496]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b52:	4b7a      	ldr	r3, [pc, #488]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b62:	4b77      	ldr	r3, [pc, #476]	@ (8002d40 <HAL_RCC_OscConfig+0x474>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d118      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6e:	4b74      	ldr	r3, [pc, #464]	@ (8002d40 <HAL_RCC_OscConfig+0x474>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a73      	ldr	r2, [pc, #460]	@ (8002d40 <HAL_RCC_OscConfig+0x474>)
 8002b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7a:	f7fe f98f 	bl	8000e9c <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b82:	f7fe f98b 	bl	8000e9c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e10c      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b94:	4b6a      	ldr	r3, [pc, #424]	@ (8002d40 <HAL_RCC_OscConfig+0x474>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x2ea>
 8002ba8:	4b64      	ldr	r3, [pc, #400]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bac:	4a63      	ldr	r2, [pc, #396]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb4:	e01c      	b.n	8002bf0 <HAL_RCC_OscConfig+0x324>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x30c>
 8002bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	4a5e      	ldr	r2, [pc, #376]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bca:	4b5c      	ldr	r3, [pc, #368]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bce:	4a5b      	ldr	r2, [pc, #364]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd6:	e00b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x324>
 8002bd8:	4b58      	ldr	r3, [pc, #352]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bdc:	4a57      	ldr	r2, [pc, #348]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be4:	4b55      	ldr	r3, [pc, #340]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be8:	4a54      	ldr	r2, [pc, #336]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002bea:	f023 0304 	bic.w	r3, r3, #4
 8002bee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d015      	beq.n	8002c24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7fe f950 	bl	8000e9c <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c00:	f7fe f94c 	bl	8000e9c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e0cb      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c16:	4b49      	ldr	r3, [pc, #292]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0ee      	beq.n	8002c00 <HAL_RCC_OscConfig+0x334>
 8002c22:	e014      	b.n	8002c4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c24:	f7fe f93a 	bl	8000e9c <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2c:	f7fe f936 	bl	8000e9c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e0b5      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c42:	4b3e      	ldr	r3, [pc, #248]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ee      	bne.n	8002c2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d105      	bne.n	8002c60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c54:	4b39      	ldr	r3, [pc, #228]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	4a38      	ldr	r2, [pc, #224]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a1 	beq.w	8002dac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c6a:	4b34      	ldr	r3, [pc, #208]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d05c      	beq.n	8002d30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d141      	bne.n	8002d02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b31      	ldr	r3, [pc, #196]	@ (8002d44 <HAL_RCC_OscConfig+0x478>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fe f90a 	bl	8000e9c <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe f906 	bl	8000e9c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e087      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	4b27      	ldr	r3, [pc, #156]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	019b      	lsls	r3, r3, #6
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc0:	085b      	lsrs	r3, r3, #1
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	041b      	lsls	r3, r3, #16
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ccc:	061b      	lsls	r3, r3, #24
 8002cce:	491b      	ldr	r1, [pc, #108]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d44 <HAL_RCC_OscConfig+0x478>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7fe f8df 	bl	8000e9c <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7fe f8db 	bl	8000e9c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e05c      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf4:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x416>
 8002d00:	e054      	b.n	8002dac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d02:	4b10      	ldr	r3, [pc, #64]	@ (8002d44 <HAL_RCC_OscConfig+0x478>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fe f8c8 	bl	8000e9c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe f8c4 	bl	8000e9c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e045      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_RCC_OscConfig+0x470>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x444>
 8002d2e:	e03d      	b.n	8002dac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d107      	bne.n	8002d48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e038      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40007000 	.word	0x40007000
 8002d44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d48:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <HAL_RCC_OscConfig+0x4ec>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d028      	beq.n	8002da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d121      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d11a      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d78:	4013      	ands	r3, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d111      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	3b01      	subs	r3, #1
 8002d92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800

08002dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0cc      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b68      	ldr	r3, [pc, #416]	@ (8002f74 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d90c      	bls.n	8002df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b65      	ldr	r3, [pc, #404]	@ (8002f74 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b63      	ldr	r3, [pc, #396]	@ (8002f74 <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0b8      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d020      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e10:	4b59      	ldr	r3, [pc, #356]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4a58      	ldr	r2, [pc, #352]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e28:	4b53      	ldr	r3, [pc, #332]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4a52      	ldr	r2, [pc, #328]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e34:	4b50      	ldr	r3, [pc, #320]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	494d      	ldr	r1, [pc, #308]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d044      	beq.n	8002edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	4b47      	ldr	r3, [pc, #284]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d119      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e07f      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d003      	beq.n	8002e7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d107      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e06f      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e067      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e9a:	4b37      	ldr	r3, [pc, #220]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f023 0203 	bic.w	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4934      	ldr	r1, [pc, #208]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eac:	f7fd fff6 	bl	8000e9c <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb4:	f7fd fff2 	bl	8000e9c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e04f      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	4b2b      	ldr	r3, [pc, #172]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 020c 	and.w	r2, r3, #12
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d1eb      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002edc:	4b25      	ldr	r3, [pc, #148]	@ (8002f74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d20c      	bcs.n	8002f04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b22      	ldr	r3, [pc, #136]	@ (8002f74 <HAL_RCC_ClockConfig+0x1b8>)
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e032      	b.n	8002f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f10:	4b19      	ldr	r3, [pc, #100]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4916      	ldr	r1, [pc, #88]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2e:	4b12      	ldr	r3, [pc, #72]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	490e      	ldr	r1, [pc, #56]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f42:	f000 f821 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8002f46:	4602      	mov	r2, r0
 8002f48:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	490a      	ldr	r1, [pc, #40]	@ (8002f7c <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	5ccb      	ldrb	r3, [r1, r3]
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	4a09      	ldr	r2, [pc, #36]	@ (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f5e:	4b09      	ldr	r3, [pc, #36]	@ (8002f84 <HAL_RCC_ClockConfig+0x1c8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd ff56 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40023c00 	.word	0x40023c00
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	08008010 	.word	0x08008010
 8002f80:	20000000 	.word	0x20000000
 8002f84:	20000004 	.word	0x20000004

08002f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f8c:	b090      	sub	sp, #64	@ 0x40
 8002f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fa0:	4b59      	ldr	r3, [pc, #356]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d00d      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	f200 80a1 	bhi.w	80030f4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0x34>
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d003      	beq.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fba:	e09b      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fbc:	4b53      	ldr	r3, [pc, #332]	@ (800310c <HAL_RCC_GetSysClockFreq+0x184>)
 8002fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fc0:	e09b      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fc2:	4b53      	ldr	r3, [pc, #332]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fc6:	e098      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fd2:	4b4d      	ldr	r3, [pc, #308]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d028      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fde:	4b4a      	ldr	r3, [pc, #296]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	099b      	lsrs	r3, r3, #6
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	623b      	str	r3, [r7, #32]
 8002fe8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4b47      	ldr	r3, [pc, #284]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ff4:	fb03 f201 	mul.w	r2, r3, r1
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	fb00 f303 	mul.w	r3, r0, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	4a43      	ldr	r2, [pc, #268]	@ (8003110 <HAL_RCC_GetSysClockFreq+0x188>)
 8003002:	fba0 1202 	umull	r1, r2, r0, r2
 8003006:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003008:	460a      	mov	r2, r1
 800300a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800300c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800300e:	4413      	add	r3, r2
 8003010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003014:	2200      	movs	r2, #0
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	61fa      	str	r2, [r7, #28]
 800301a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800301e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003022:	f7fd f935 	bl	8000290 <__aeabi_uldivmod>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4613      	mov	r3, r2
 800302c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800302e:	e053      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003030:	4b35      	ldr	r3, [pc, #212]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x180>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	2200      	movs	r2, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	617a      	str	r2, [r7, #20]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003042:	f04f 0b00 	mov.w	fp, #0
 8003046:	4652      	mov	r2, sl
 8003048:	465b      	mov	r3, fp
 800304a:	f04f 0000 	mov.w	r0, #0
 800304e:	f04f 0100 	mov.w	r1, #0
 8003052:	0159      	lsls	r1, r3, #5
 8003054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003058:	0150      	lsls	r0, r2, #5
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	ebb2 080a 	subs.w	r8, r2, sl
 8003062:	eb63 090b 	sbc.w	r9, r3, fp
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003072:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003076:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800307a:	ebb2 0408 	subs.w	r4, r2, r8
 800307e:	eb63 0509 	sbc.w	r5, r3, r9
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	00eb      	lsls	r3, r5, #3
 800308c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003090:	00e2      	lsls	r2, r4, #3
 8003092:	4614      	mov	r4, r2
 8003094:	461d      	mov	r5, r3
 8003096:	eb14 030a 	adds.w	r3, r4, sl
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	eb45 030b 	adc.w	r3, r5, fp
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ae:	4629      	mov	r1, r5
 80030b0:	028b      	lsls	r3, r1, #10
 80030b2:	4621      	mov	r1, r4
 80030b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030b8:	4621      	mov	r1, r4
 80030ba:	028a      	lsls	r2, r1, #10
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c2:	2200      	movs	r2, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	60fa      	str	r2, [r7, #12]
 80030c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030cc:	f7fd f8e0 	bl	8000290 <__aeabi_uldivmod>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4613      	mov	r3, r2
 80030d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x180>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	3301      	adds	r3, #1
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80030e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030f2:	e002      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f4:	4b05      	ldr	r3, [pc, #20]	@ (800310c <HAL_RCC_GetSysClockFreq+0x184>)
 80030f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3740      	adds	r7, #64	@ 0x40
 8003100:	46bd      	mov	sp, r7
 8003102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	00f42400 	.word	0x00f42400
 8003110:	017d7840 	.word	0x017d7840

08003114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003118:	4b03      	ldr	r3, [pc, #12]	@ (8003128 <HAL_RCC_GetHCLKFreq+0x14>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000000 	.word	0x20000000

0800312c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e097      	b.n	8003270 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7fd fcab 	bl	8000ab0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003170:	f023 0307 	bic.w	r3, r3, #7
 8003174:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3304      	adds	r3, #4
 800317e:	4619      	mov	r1, r3
 8003180:	4610      	mov	r0, r2
 8003182:	f000 f907 	bl	8003394 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ae:	f023 0303 	bic.w	r3, r3, #3
 80031b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	4313      	orrs	r3, r2
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80031cc:	f023 030c 	bic.w	r3, r3, #12
 80031d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	4313      	orrs	r3, r2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	011a      	lsls	r2, r3, #4
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	031b      	lsls	r3, r3, #12
 80031fc:	4313      	orrs	r3, r2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800320a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003212:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	4313      	orrs	r3, r2
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003288:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003290:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003298:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d110      	bne.n	80032ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d102      	bne.n	80032b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80032ae:	7b7b      	ldrb	r3, [r7, #13]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d001      	beq.n	80032b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e069      	b.n	800338c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032c8:	e031      	b.n	800332e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d110      	bne.n	80032f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032d0:	7bbb      	ldrb	r3, [r7, #14]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d102      	bne.n	80032dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032d6:	7b3b      	ldrb	r3, [r7, #12]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d001      	beq.n	80032e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e055      	b.n	800338c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032f0:	e01d      	b.n	800332e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d108      	bne.n	800330a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032f8:	7bbb      	ldrb	r3, [r7, #14]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d105      	bne.n	800330a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032fe:	7b7b      	ldrb	r3, [r7, #13]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d102      	bne.n	800330a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003304:	7b3b      	ldrb	r3, [r7, #12]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e03e      	b.n	800338c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2202      	movs	r2, #2
 800331a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_TIM_Encoder_Start+0xc4>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b04      	cmp	r3, #4
 8003338:	d008      	beq.n	800334c <HAL_TIM_Encoder_Start+0xd4>
 800333a:	e00f      	b.n	800335c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2201      	movs	r2, #1
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f000 f8b1 	bl	80034ac <TIM_CCxChannelCmd>
      break;
 800334a:	e016      	b.n	800337a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2201      	movs	r2, #1
 8003352:	2104      	movs	r1, #4
 8003354:	4618      	mov	r0, r3
 8003356:	f000 f8a9 	bl	80034ac <TIM_CCxChannelCmd>
      break;
 800335a:	e00e      	b.n	800337a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2201      	movs	r2, #1
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f8a1 	bl	80034ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2201      	movs	r2, #1
 8003370:	2104      	movs	r1, #4
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f89a 	bl	80034ac <TIM_CCxChannelCmd>
      break;
 8003378:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003490 <TIM_Base_SetConfig+0xfc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00f      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b2:	d00b      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a37      	ldr	r2, [pc, #220]	@ (8003494 <TIM_Base_SetConfig+0x100>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a36      	ldr	r2, [pc, #216]	@ (8003498 <TIM_Base_SetConfig+0x104>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a35      	ldr	r2, [pc, #212]	@ (800349c <TIM_Base_SetConfig+0x108>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d108      	bne.n	80033de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003490 <TIM_Base_SetConfig+0xfc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01b      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ec:	d017      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a28      	ldr	r2, [pc, #160]	@ (8003494 <TIM_Base_SetConfig+0x100>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a27      	ldr	r2, [pc, #156]	@ (8003498 <TIM_Base_SetConfig+0x104>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00f      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a26      	ldr	r2, [pc, #152]	@ (800349c <TIM_Base_SetConfig+0x108>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00b      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a25      	ldr	r2, [pc, #148]	@ (80034a0 <TIM_Base_SetConfig+0x10c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d007      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a24      	ldr	r2, [pc, #144]	@ (80034a4 <TIM_Base_SetConfig+0x110>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d003      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a23      	ldr	r2, [pc, #140]	@ (80034a8 <TIM_Base_SetConfig+0x114>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d108      	bne.n	8003430 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a0e      	ldr	r2, [pc, #56]	@ (8003490 <TIM_Base_SetConfig+0xfc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d103      	bne.n	8003464 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b01      	cmp	r3, #1
 8003474:	d105      	bne.n	8003482 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f023 0201 	bic.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	611a      	str	r2, [r3, #16]
  }
}
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800

080034ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	2201      	movs	r2, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1a      	ldr	r2, [r3, #32]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	401a      	ands	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a1a      	ldr	r2, [r3, #32]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	431a      	orrs	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800350c:	2302      	movs	r3, #2
 800350e:	e050      	b.n	80035b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1c      	ldr	r2, [pc, #112]	@ (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d018      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355c:	d013      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a18      	ldr	r2, [pc, #96]	@ (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a16      	ldr	r2, [pc, #88]	@ (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d009      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a15      	ldr	r2, [pc, #84]	@ (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a13      	ldr	r2, [pc, #76]	@ (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d10c      	bne.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800358c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	4313      	orrs	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40010000 	.word	0x40010000
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	40014000 	.word	0x40014000

080035d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035d4:	b084      	sub	sp, #16
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	f107 001c 	add.w	r0, r7, #28
 80035e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d123      	bne.n	8003636 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003602:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003616:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800361a:	2b01      	cmp	r3, #1
 800361c:	d105      	bne.n	800362a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f001 fae8 	bl	8004c00 <USB_CoreReset>
 8003630:	4603      	mov	r3, r0
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	e01b      	b.n	800366e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f001 fadc 	bl	8004c00 <USB_CoreReset>
 8003648:	4603      	mov	r3, r0
 800364a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800364c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003658:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003660:	e005      	b.n	800366e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003666:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800366e:	7fbb      	ldrb	r3, [r7, #30]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d10b      	bne.n	800368c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f043 0206 	orr.w	r2, r3, #6
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003698:	b004      	add	sp, #16
 800369a:	4770      	bx	lr

0800369c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	4613      	mov	r3, r2
 80036a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d165      	bne.n	800377c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4a41      	ldr	r2, [pc, #260]	@ (80037b8 <USB_SetTurnaroundTime+0x11c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d906      	bls.n	80036c6 <USB_SetTurnaroundTime+0x2a>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4a40      	ldr	r2, [pc, #256]	@ (80037bc <USB_SetTurnaroundTime+0x120>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d202      	bcs.n	80036c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80036c0:	230f      	movs	r3, #15
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e062      	b.n	800378c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4a3c      	ldr	r2, [pc, #240]	@ (80037bc <USB_SetTurnaroundTime+0x120>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d306      	bcc.n	80036dc <USB_SetTurnaroundTime+0x40>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4a3b      	ldr	r2, [pc, #236]	@ (80037c0 <USB_SetTurnaroundTime+0x124>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d202      	bcs.n	80036dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036d6:	230e      	movs	r3, #14
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	e057      	b.n	800378c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4a38      	ldr	r2, [pc, #224]	@ (80037c0 <USB_SetTurnaroundTime+0x124>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d306      	bcc.n	80036f2 <USB_SetTurnaroundTime+0x56>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4a37      	ldr	r2, [pc, #220]	@ (80037c4 <USB_SetTurnaroundTime+0x128>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d202      	bcs.n	80036f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036ec:	230d      	movs	r3, #13
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	e04c      	b.n	800378c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4a33      	ldr	r2, [pc, #204]	@ (80037c4 <USB_SetTurnaroundTime+0x128>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d306      	bcc.n	8003708 <USB_SetTurnaroundTime+0x6c>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4a32      	ldr	r2, [pc, #200]	@ (80037c8 <USB_SetTurnaroundTime+0x12c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d802      	bhi.n	8003708 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003702:	230c      	movs	r3, #12
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e041      	b.n	800378c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4a2f      	ldr	r2, [pc, #188]	@ (80037c8 <USB_SetTurnaroundTime+0x12c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d906      	bls.n	800371e <USB_SetTurnaroundTime+0x82>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4a2e      	ldr	r2, [pc, #184]	@ (80037cc <USB_SetTurnaroundTime+0x130>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d802      	bhi.n	800371e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003718:	230b      	movs	r3, #11
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	e036      	b.n	800378c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4a2a      	ldr	r2, [pc, #168]	@ (80037cc <USB_SetTurnaroundTime+0x130>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d906      	bls.n	8003734 <USB_SetTurnaroundTime+0x98>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4a29      	ldr	r2, [pc, #164]	@ (80037d0 <USB_SetTurnaroundTime+0x134>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d802      	bhi.n	8003734 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800372e:	230a      	movs	r3, #10
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	e02b      	b.n	800378c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4a26      	ldr	r2, [pc, #152]	@ (80037d0 <USB_SetTurnaroundTime+0x134>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d906      	bls.n	800374a <USB_SetTurnaroundTime+0xae>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4a25      	ldr	r2, [pc, #148]	@ (80037d4 <USB_SetTurnaroundTime+0x138>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d202      	bcs.n	800374a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003744:	2309      	movs	r3, #9
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	e020      	b.n	800378c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4a21      	ldr	r2, [pc, #132]	@ (80037d4 <USB_SetTurnaroundTime+0x138>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d306      	bcc.n	8003760 <USB_SetTurnaroundTime+0xc4>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4a20      	ldr	r2, [pc, #128]	@ (80037d8 <USB_SetTurnaroundTime+0x13c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d802      	bhi.n	8003760 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800375a:	2308      	movs	r3, #8
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e015      	b.n	800378c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4a1d      	ldr	r2, [pc, #116]	@ (80037d8 <USB_SetTurnaroundTime+0x13c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d906      	bls.n	8003776 <USB_SetTurnaroundTime+0xda>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4a1c      	ldr	r2, [pc, #112]	@ (80037dc <USB_SetTurnaroundTime+0x140>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d202      	bcs.n	8003776 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003770:	2307      	movs	r3, #7
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	e00a      	b.n	800378c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003776:	2306      	movs	r3, #6
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	e007      	b.n	800378c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003782:	2309      	movs	r3, #9
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e001      	b.n	800378c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003788:	2309      	movs	r3, #9
 800378a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	029b      	lsls	r3, r3, #10
 80037a0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80037a4:	431a      	orrs	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	00d8acbf 	.word	0x00d8acbf
 80037bc:	00e4e1c0 	.word	0x00e4e1c0
 80037c0:	00f42400 	.word	0x00f42400
 80037c4:	01067380 	.word	0x01067380
 80037c8:	011a499f 	.word	0x011a499f
 80037cc:	01312cff 	.word	0x01312cff
 80037d0:	014ca43f 	.word	0x014ca43f
 80037d4:	016e3600 	.word	0x016e3600
 80037d8:	01a6ab1f 	.word	0x01a6ab1f
 80037dc:	01e84800 	.word	0x01e84800

080037e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f043 0201 	orr.w	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f023 0201 	bic.w	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d115      	bne.n	8003872 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003852:	200a      	movs	r0, #10
 8003854:	f7fd fb2e 	bl	8000eb4 <HAL_Delay>
      ms += 10U;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	330a      	adds	r3, #10
 800385c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f001 f93f 	bl	8004ae2 <USB_GetMode>
 8003864:	4603      	mov	r3, r0
 8003866:	2b01      	cmp	r3, #1
 8003868:	d01e      	beq.n	80038a8 <USB_SetCurrentMode+0x84>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2bc7      	cmp	r3, #199	@ 0xc7
 800386e:	d9f0      	bls.n	8003852 <USB_SetCurrentMode+0x2e>
 8003870:	e01a      	b.n	80038a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d115      	bne.n	80038a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003884:	200a      	movs	r0, #10
 8003886:	f7fd fb15 	bl	8000eb4 <HAL_Delay>
      ms += 10U;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	330a      	adds	r3, #10
 800388e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f001 f926 	bl	8004ae2 <USB_GetMode>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <USB_SetCurrentMode+0x84>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2bc7      	cmp	r3, #199	@ 0xc7
 80038a0:	d9f0      	bls.n	8003884 <USB_SetCurrentMode+0x60>
 80038a2:	e001      	b.n	80038a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e005      	b.n	80038b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80038ac:	d101      	bne.n	80038b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038bc:	b084      	sub	sp, #16
 80038be:	b580      	push	{r7, lr}
 80038c0:	b086      	sub	sp, #24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80038ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	e009      	b.n	80038f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	3340      	adds	r3, #64	@ 0x40
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	2200      	movs	r2, #0
 80038e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	3301      	adds	r3, #1
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	2b0e      	cmp	r3, #14
 80038f4:	d9f2      	bls.n	80038dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11c      	bne.n	8003938 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003916:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003922:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	639a      	str	r2, [r3, #56]	@ 0x38
 8003936:	e00b      	b.n	8003950 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003948:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003956:	461a      	mov	r2, r3
 8003958:	2300      	movs	r3, #0
 800395a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800395c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003960:	2b01      	cmp	r3, #1
 8003962:	d10d      	bne.n	8003980 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800396c:	2100      	movs	r1, #0
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f968 	bl	8003c44 <USB_SetDevSpeed>
 8003974:	e008      	b.n	8003988 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003976:	2101      	movs	r1, #1
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f963 	bl	8003c44 <USB_SetDevSpeed>
 800397e:	e003      	b.n	8003988 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003980:	2103      	movs	r1, #3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f95e 	bl	8003c44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003988:	2110      	movs	r1, #16
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f8fa 	bl	8003b84 <USB_FlushTxFifo>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f924 	bl	8003be8 <USB_FlushRxFifo>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039b0:	461a      	mov	r2, r3
 80039b2:	2300      	movs	r3, #0
 80039b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039bc:	461a      	mov	r2, r3
 80039be:	2300      	movs	r3, #0
 80039c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c8:	461a      	mov	r2, r3
 80039ca:	2300      	movs	r3, #0
 80039cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	e043      	b.n	8003a5c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039ea:	d118      	bne.n	8003a1e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039fe:	461a      	mov	r2, r3
 8003a00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e013      	b.n	8003a30 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a14:	461a      	mov	r2, r3
 8003a16:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	e008      	b.n	8003a30 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2300      	movs	r3, #0
 8003a40:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a60:	461a      	mov	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d3b5      	bcc.n	80039d4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	e043      	b.n	8003af6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a84:	d118      	bne.n	8003ab8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	e013      	b.n	8003aca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e008      	b.n	8003aca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003aee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	3301      	adds	r3, #1
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003afa:	461a      	mov	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d3b5      	bcc.n	8003a6e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b14:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003b22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d105      	bne.n	8003b38 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f043 0210 	orr.w	r2, r3, #16
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699a      	ldr	r2, [r3, #24]
 8003b3c:	4b10      	ldr	r3, [pc, #64]	@ (8003b80 <USB_DevInit+0x2c4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f043 0208 	orr.w	r2, r3, #8
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d107      	bne.n	8003b70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b68:	f043 0304 	orr.w	r3, r3, #4
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b7c:	b004      	add	sp, #16
 8003b7e:	4770      	bx	lr
 8003b80:	803c3800 	.word	0x803c3800

08003b84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3301      	adds	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b9e:	d901      	bls.n	8003ba4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e01b      	b.n	8003bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	daf2      	bge.n	8003b92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	019b      	lsls	r3, r3, #6
 8003bb4:	f043 0220 	orr.w	r2, r3, #32
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bc8:	d901      	bls.n	8003bce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e006      	b.n	8003bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d0f0      	beq.n	8003bbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c00:	d901      	bls.n	8003c06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e018      	b.n	8003c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	daf2      	bge.n	8003bf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2210      	movs	r2, #16
 8003c16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c24:	d901      	bls.n	8003c2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e006      	b.n	8003c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d0f0      	beq.n	8003c18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c64:	4313      	orrs	r3, r2
 8003c66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b087      	sub	sp, #28
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 0306 	and.w	r3, r3, #6
 8003c8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]
 8003c9a:	e00a      	b.n	8003cb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d002      	beq.n	8003ca8 <USB_GetDevSpeed+0x32>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b06      	cmp	r3, #6
 8003ca6:	d102      	bne.n	8003cae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	75fb      	strb	r3, [r7, #23]
 8003cac:	e001      	b.n	8003cb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003cae:	230f      	movs	r3, #15
 8003cb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	785b      	ldrb	r3, [r3, #1]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d13a      	bne.n	8003d52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	68f9      	ldr	r1, [r7, #12]
 8003cf6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d155      	bne.n	8003dc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	791b      	ldrb	r3, [r3, #4]
 8003d2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	059b      	lsls	r3, r3, #22
 8003d36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	e036      	b.n	8003dc0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	2101      	movs	r1, #1
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	68f9      	ldr	r1, [r7, #12]
 8003d6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d11a      	bne.n	8003dc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	791b      	ldrb	r3, [r3, #4]
 8003da4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003da6:	430b      	orrs	r3, r1
 8003da8:	4313      	orrs	r3, r2
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	0151      	lsls	r1, r2, #5
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	440a      	add	r2, r1
 8003db2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dbe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	785b      	ldrb	r3, [r3, #1]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d161      	bne.n	8003eb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e02:	d11f      	bne.n	8003e44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	0151      	lsls	r1, r2, #5
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	440a      	add	r2, r1
 8003e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	0151      	lsls	r1, r2, #5
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	440a      	add	r2, r1
 8003e3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	2101      	movs	r1, #1
 8003e56:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e64:	4013      	ands	r3, r2
 8003e66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	68f9      	ldr	r1, [r7, #12]
 8003e84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	0159      	lsls	r1, r3, #5
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	440b      	add	r3, r1
 8003ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4b35      	ldr	r3, [pc, #212]	@ (8003f80 <USB_DeactivateEndpoint+0x1b0>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]
 8003eae:	e060      	b.n	8003f72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ec6:	d11f      	bne.n	8003f08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	0151      	lsls	r1, r2, #5
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	440a      	add	r2, r1
 8003ede:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ee2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ee6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	0151      	lsls	r1, r2, #5
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	440a      	add	r2, r1
 8003efe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	2101      	movs	r1, #1
 8003f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1e:	041b      	lsls	r3, r3, #16
 8003f20:	43db      	mvns	r3, r3
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f28:	4013      	ands	r3, r2
 8003f2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f42:	041b      	lsls	r3, r3, #16
 8003f44:	43db      	mvns	r3, r3
 8003f46:	68f9      	ldr	r1, [r7, #12]
 8003f48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	0159      	lsls	r1, r3, #5
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	440b      	add	r3, r1
 8003f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <USB_DeactivateEndpoint+0x1b4>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	ec337800 	.word	0xec337800
 8003f84:	eff37800 	.word	0xeff37800

08003f88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	@ 0x28
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	4613      	mov	r3, r2
 8003f94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	785b      	ldrb	r3, [r3, #1]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	f040 817f 	bne.w	80042a8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d132      	bne.n	8004018 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	0151      	lsls	r1, r2, #5
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	440a      	add	r2, r1
 8003fc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fcc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003fd0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003fd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	0151      	lsls	r1, r2, #5
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	440a      	add	r2, r1
 8003fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ff0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	0151      	lsls	r1, r2, #5
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	440a      	add	r2, r1
 800400c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004010:	0cdb      	lsrs	r3, r3, #19
 8004012:	04db      	lsls	r3, r3, #19
 8004014:	6113      	str	r3, [r2, #16]
 8004016:	e097      	b.n	8004148 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	0151      	lsls	r1, r2, #5
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	440a      	add	r2, r1
 800402e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004032:	0cdb      	lsrs	r3, r3, #19
 8004034:	04db      	lsls	r3, r3, #19
 8004036:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004052:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004056:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800405a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d11a      	bne.n	8004098 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	429a      	cmp	r2, r3
 800406c:	d903      	bls.n	8004076 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	0151      	lsls	r1, r2, #5
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	440a      	add	r2, r1
 800408c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004090:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004094:	6113      	str	r3, [r2, #16]
 8004096:	e044      	b.n	8004122 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	4413      	add	r3, r2
 80040a2:	1e5a      	subs	r2, r3, #1
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	8afb      	ldrh	r3, [r7, #22]
 80040be:	04d9      	lsls	r1, r3, #19
 80040c0:	4ba4      	ldr	r3, [pc, #656]	@ (8004354 <USB_EPStartXfer+0x3cc>)
 80040c2:	400b      	ands	r3, r1
 80040c4:	69b9      	ldr	r1, [r7, #24]
 80040c6:	0148      	lsls	r0, r1, #5
 80040c8:	69f9      	ldr	r1, [r7, #28]
 80040ca:	4401      	add	r1, r0
 80040cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80040d0:	4313      	orrs	r3, r2
 80040d2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	791b      	ldrb	r3, [r3, #4]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d122      	bne.n	8004122 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	0151      	lsls	r1, r2, #5
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	440a      	add	r2, r1
 80040f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040f6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80040fa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	8afb      	ldrh	r3, [r7, #22]
 800410c:	075b      	lsls	r3, r3, #29
 800410e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004112:	69b9      	ldr	r1, [r7, #24]
 8004114:	0148      	lsls	r0, r1, #5
 8004116:	69f9      	ldr	r1, [r7, #28]
 8004118:	4401      	add	r1, r0
 800411a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800411e:	4313      	orrs	r3, r2
 8004120:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004138:	69b9      	ldr	r1, [r7, #24]
 800413a:	0148      	lsls	r0, r1, #5
 800413c:	69f9      	ldr	r1, [r7, #28]
 800413e:	4401      	add	r1, r0
 8004140:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004144:	4313      	orrs	r3, r2
 8004146:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d14b      	bne.n	80041e6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004162:	461a      	mov	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	791b      	ldrb	r3, [r3, #4]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d128      	bne.n	80041c4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417e:	2b00      	cmp	r3, #0
 8004180:	d110      	bne.n	80041a4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	440a      	add	r2, r1
 8004198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800419c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e00f      	b.n	80041c4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	0151      	lsls	r1, r2, #5
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	440a      	add	r2, r1
 80041ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041c2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	0151      	lsls	r1, r2, #5
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	440a      	add	r2, r1
 80041da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	e166      	b.n	80044b4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	0151      	lsls	r1, r2, #5
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	440a      	add	r2, r1
 80041fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004200:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004204:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	791b      	ldrb	r3, [r3, #4]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d015      	beq.n	800423a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 814e 	beq.w	80044b4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800421e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	2101      	movs	r1, #1
 800422a:	fa01 f303 	lsl.w	r3, r1, r3
 800422e:	69f9      	ldr	r1, [r7, #28]
 8004230:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004234:	4313      	orrs	r3, r2
 8004236:	634b      	str	r3, [r1, #52]	@ 0x34
 8004238:	e13c      	b.n	80044b4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d110      	bne.n	800426c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	0151      	lsls	r1, r2, #5
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	440a      	add	r2, r1
 8004260:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004264:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	e00f      	b.n	800428c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	440a      	add	r2, r1
 8004282:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800428a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	68d9      	ldr	r1, [r3, #12]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781a      	ldrb	r2, [r3, #0]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	b298      	uxth	r0, r3
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	4603      	mov	r3, r0
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f9b9 	bl	8004618 <USB_WritePacket>
 80042a6:	e105      	b.n	80044b4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042c2:	0cdb      	lsrs	r3, r3, #19
 80042c4:	04db      	lsls	r3, r3, #19
 80042c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	0151      	lsls	r1, r2, #5
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	440a      	add	r2, r1
 80042de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80042e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80042ea:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d132      	bne.n	8004358 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004320:	69b9      	ldr	r1, [r7, #24]
 8004322:	0148      	lsls	r0, r1, #5
 8004324:	69f9      	ldr	r1, [r7, #28]
 8004326:	4401      	add	r1, r0
 8004328:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800432c:	4313      	orrs	r3, r2
 800432e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	440a      	add	r2, r1
 8004346:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800434a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800434e:	6113      	str	r3, [r2, #16]
 8004350:	e062      	b.n	8004418 <USB_EPStartXfer+0x490>
 8004352:	bf00      	nop
 8004354:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d123      	bne.n	80043a8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004376:	69b9      	ldr	r1, [r7, #24]
 8004378:	0148      	lsls	r0, r1, #5
 800437a:	69f9      	ldr	r1, [r7, #28]
 800437c:	4401      	add	r1, r0
 800437e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004382:	4313      	orrs	r3, r2
 8004384:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	0151      	lsls	r1, r2, #5
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	440a      	add	r2, r1
 800439c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043a4:	6113      	str	r3, [r2, #16]
 80043a6:	e037      	b.n	8004418 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4413      	add	r3, r2
 80043b2:	1e5a      	subs	r2, r3, #1
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	8afa      	ldrh	r2, [r7, #22]
 80043c4:	fb03 f202 	mul.w	r2, r3, r2
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	8afb      	ldrh	r3, [r7, #22]
 80043dc:	04d9      	lsls	r1, r3, #19
 80043de:	4b38      	ldr	r3, [pc, #224]	@ (80044c0 <USB_EPStartXfer+0x538>)
 80043e0:	400b      	ands	r3, r1
 80043e2:	69b9      	ldr	r1, [r7, #24]
 80043e4:	0148      	lsls	r0, r1, #5
 80043e6:	69f9      	ldr	r1, [r7, #28]
 80043e8:	4401      	add	r1, r0
 80043ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043ee:	4313      	orrs	r3, r2
 80043f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004408:	69b9      	ldr	r1, [r7, #24]
 800440a:	0148      	lsls	r0, r1, #5
 800440c:	69f9      	ldr	r1, [r7, #28]
 800440e:	4401      	add	r1, r0
 8004410:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004414:	4313      	orrs	r3, r2
 8004416:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d10d      	bne.n	800443a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	68d9      	ldr	r1, [r3, #12]
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004436:	460a      	mov	r2, r1
 8004438:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	791b      	ldrb	r3, [r3, #4]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d128      	bne.n	8004494 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d110      	bne.n	8004474 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	440a      	add	r2, r1
 8004468:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800446c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e00f      	b.n	8004494 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	0151      	lsls	r1, r2, #5
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	440a      	add	r2, r1
 800448a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800448e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004492:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	0151      	lsls	r1, r2, #5
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	440a      	add	r2, r1
 80044aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80044b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	1ff80000 	.word	0x1ff80000

080044c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d14a      	bne.n	8004578 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044fa:	f040 8086 	bne.w	800460a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	7812      	ldrb	r2, [r2, #0]
 8004512:	0151      	lsls	r1, r2, #5
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	440a      	add	r2, r1
 8004518:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800451c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004520:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	7812      	ldrb	r2, [r2, #0]
 8004536:	0151      	lsls	r1, r2, #5
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	440a      	add	r2, r1
 800453c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004540:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004544:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3301      	adds	r3, #1
 800454a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004552:	4293      	cmp	r3, r2
 8004554:	d902      	bls.n	800455c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
          break;
 800455a:	e056      	b.n	800460a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004570:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004574:	d0e7      	beq.n	8004546 <USB_EPStopXfer+0x82>
 8004576:	e048      	b.n	800460a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800458c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004590:	d13b      	bne.n	800460a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	0151      	lsls	r1, r2, #5
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	440a      	add	r2, r1
 80045ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	7812      	ldrb	r2, [r2, #0]
 80045ca:	0151      	lsls	r1, r2, #5
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	440a      	add	r2, r1
 80045d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3301      	adds	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d902      	bls.n	80045f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
          break;
 80045ee:	e00c      	b.n	800460a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004604:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004608:	d0e7      	beq.n	80045da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800460a:	7dfb      	ldrb	r3, [r7, #23]
}
 800460c:	4618      	mov	r0, r3
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004618:	b480      	push	{r7}
 800461a:	b089      	sub	sp, #36	@ 0x24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	4611      	mov	r1, r2
 8004624:	461a      	mov	r2, r3
 8004626:	460b      	mov	r3, r1
 8004628:	71fb      	strb	r3, [r7, #7]
 800462a:	4613      	mov	r3, r2
 800462c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004636:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d123      	bne.n	8004686 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800463e:	88bb      	ldrh	r3, [r7, #4]
 8004640:	3303      	adds	r3, #3
 8004642:	089b      	lsrs	r3, r3, #2
 8004644:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	e018      	b.n	800467e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	031a      	lsls	r2, r3, #12
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	4413      	add	r3, r2
 8004654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004658:	461a      	mov	r2, r3
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	3301      	adds	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	3301      	adds	r3, #1
 800466a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	3301      	adds	r3, #1
 8004670:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	3301      	adds	r3, #1
 8004676:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	3301      	adds	r3, #1
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	429a      	cmp	r2, r3
 8004684:	d3e2      	bcc.n	800464c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3724      	adds	r7, #36	@ 0x24
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004694:	b480      	push	{r7}
 8004696:	b08b      	sub	sp, #44	@ 0x2c
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	4613      	mov	r3, r2
 80046a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	089b      	lsrs	r3, r3, #2
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80046ba:	2300      	movs	r3, #0
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	e014      	b.n	80046ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	3301      	adds	r3, #1
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	3301      	adds	r3, #1
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	3301      	adds	r3, #1
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	3301      	adds	r3, #1
 80046e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	3301      	adds	r3, #1
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	6a3a      	ldr	r2, [r7, #32]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d3e6      	bcc.n	80046c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80046f2:	8bfb      	ldrh	r3, [r7, #30]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01e      	beq.n	8004736 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004702:	461a      	mov	r2, r3
 8004704:	f107 0310 	add.w	r3, r7, #16
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
 8004718:	b2da      	uxtb	r2, r3
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	701a      	strb	r2, [r3, #0]
      i++;
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	3301      	adds	r3, #1
 8004722:	623b      	str	r3, [r7, #32]
      pDest++;
 8004724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004726:	3301      	adds	r3, #1
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800472a:	8bfb      	ldrh	r3, [r7, #30]
 800472c:	3b01      	subs	r3, #1
 800472e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004730:	8bfb      	ldrh	r3, [r7, #30]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1ea      	bne.n	800470c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004738:	4618      	mov	r0, r3
 800473a:	372c      	adds	r7, #44	@ 0x2c
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	785b      	ldrb	r3, [r3, #1]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d12c      	bne.n	80047ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	db12      	blt.n	8004798 <USB_EPSetStall+0x54>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00f      	beq.n	8004798 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	440a      	add	r2, r1
 800478e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004792:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004796:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	0151      	lsls	r1, r2, #5
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	440a      	add	r2, r1
 80047ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	e02b      	b.n	8004812 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	db12      	blt.n	80047f2 <USB_EPSetStall+0xae>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00f      	beq.n	80047f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	0151      	lsls	r1, r2, #5
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	440a      	add	r2, r1
 80047e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	0151      	lsls	r1, r2, #5
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	440a      	add	r2, r1
 8004808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800480c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004810:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	785b      	ldrb	r3, [r3, #1]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d128      	bne.n	800488e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	440a      	add	r2, r1
 8004852:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004856:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800485a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	791b      	ldrb	r3, [r3, #4]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d003      	beq.n	800486c <USB_EPClearStall+0x4c>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	791b      	ldrb	r3, [r3, #4]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d138      	bne.n	80048de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	0151      	lsls	r1, r2, #5
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	440a      	add	r2, r1
 8004882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	e027      	b.n	80048de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	0151      	lsls	r1, r2, #5
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	440a      	add	r2, r1
 80048a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	791b      	ldrb	r3, [r3, #4]
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d003      	beq.n	80048be <USB_EPClearStall+0x9e>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	791b      	ldrb	r3, [r3, #4]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d10f      	bne.n	80048de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	0151      	lsls	r1, r2, #5
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	440a      	add	r2, r1
 80048d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800490a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800490e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004920:	68f9      	ldr	r1, [r7, #12]
 8004922:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004926:	4313      	orrs	r3, r2
 8004928:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004966:	f023 0302 	bic.w	r3, r3, #2
 800496a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004994:	f023 0303 	bic.w	r3, r3, #3
 8004998:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049a8:	f043 0302 	orr.w	r3, r3, #2
 80049ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4013      	ands	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049d4:	68fb      	ldr	r3, [r7, #12]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	4013      	ands	r3, r2
 8004a04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	0c1b      	lsrs	r3, r3, #16
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	4013      	ands	r3, r2
 8004a38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	b29b      	uxth	r3, r3
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	4013      	ands	r3, r2
 8004a76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a78:	68bb      	ldr	r3, [r7, #8]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b087      	sub	sp, #28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab6:	01db      	lsls	r3, r3, #7
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0301 	and.w	r3, r3, #1
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b085      	sub	sp, #20
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b18:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b1c:	f023 0307 	bic.w	r3, r3, #7
 8004b20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	333c      	adds	r3, #60	@ 0x3c
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	4a26      	ldr	r2, [pc, #152]	@ (8004bfc <USB_EP0_OutStart+0xb8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d90a      	bls.n	8004b7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b78:	d101      	bne.n	8004b7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e037      	b.n	8004bee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b84:	461a      	mov	r2, r3
 8004b86:	2300      	movs	r3, #0
 8004b88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bac:	f043 0318 	orr.w	r3, r3, #24
 8004bb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bc0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004bc4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004bc6:	7afb      	ldrb	r3, [r7, #11]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d10f      	bne.n	8004bec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004be6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004bea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	371c      	adds	r7, #28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	4f54300a 	.word	0x4f54300a

08004c00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c18:	d901      	bls.n	8004c1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e01b      	b.n	8004c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	daf2      	bge.n	8004c0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f043 0201 	orr.w	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c42:	d901      	bls.n	8004c48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e006      	b.n	8004c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d0f0      	beq.n	8004c36 <USB_CoreReset+0x36>

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
	...

08004c64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004c70:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004c74:	f002 fcaa 	bl	80075cc <USBD_static_malloc>
 8004c78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d109      	bne.n	8004c94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	32b0      	adds	r2, #176	@ 0xb0
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004c90:	2302      	movs	r3, #2
 8004c92:	e0d4      	b.n	8004e3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004c94:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004c98:	2100      	movs	r1, #0
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f002 fcfa 	bl	8007694 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	32b0      	adds	r2, #176	@ 0xb0
 8004caa:	68f9      	ldr	r1, [r7, #12]
 8004cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	32b0      	adds	r2, #176	@ 0xb0
 8004cba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	7c1b      	ldrb	r3, [r3, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d138      	bne.n	8004d3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ccc:	4b5e      	ldr	r3, [pc, #376]	@ (8004e48 <USBD_CDC_Init+0x1e4>)
 8004cce:	7819      	ldrb	r1, [r3, #0]
 8004cd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f002 fb55 	bl	8007386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004cdc:	4b5a      	ldr	r3, [pc, #360]	@ (8004e48 <USBD_CDC_Init+0x1e4>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	f003 020f 	and.w	r2, r3, #15
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	3324      	adds	r3, #36	@ 0x24
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004cf6:	4b55      	ldr	r3, [pc, #340]	@ (8004e4c <USBD_CDC_Init+0x1e8>)
 8004cf8:	7819      	ldrb	r1, [r3, #0]
 8004cfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cfe:	2202      	movs	r2, #2
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f002 fb40 	bl	8007386 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004d06:	4b51      	ldr	r3, [pc, #324]	@ (8004e4c <USBD_CDC_Init+0x1e8>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	f003 020f 	and.w	r2, r3, #15
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d1e:	2201      	movs	r2, #1
 8004d20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004d22:	4b4b      	ldr	r3, [pc, #300]	@ (8004e50 <USBD_CDC_Init+0x1ec>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	f003 020f 	and.w	r2, r3, #15
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	3326      	adds	r3, #38	@ 0x26
 8004d38:	2210      	movs	r2, #16
 8004d3a:	801a      	strh	r2, [r3, #0]
 8004d3c:	e035      	b.n	8004daa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004d3e:	4b42      	ldr	r3, [pc, #264]	@ (8004e48 <USBD_CDC_Init+0x1e4>)
 8004d40:	7819      	ldrb	r1, [r3, #0]
 8004d42:	2340      	movs	r3, #64	@ 0x40
 8004d44:	2202      	movs	r2, #2
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f002 fb1d 	bl	8007386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e48 <USBD_CDC_Init+0x1e4>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	f003 020f 	and.w	r2, r3, #15
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	3324      	adds	r3, #36	@ 0x24
 8004d62:	2201      	movs	r2, #1
 8004d64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004d66:	4b39      	ldr	r3, [pc, #228]	@ (8004e4c <USBD_CDC_Init+0x1e8>)
 8004d68:	7819      	ldrb	r1, [r3, #0]
 8004d6a:	2340      	movs	r3, #64	@ 0x40
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f002 fb09 	bl	8007386 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004d74:	4b35      	ldr	r3, [pc, #212]	@ (8004e4c <USBD_CDC_Init+0x1e8>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	f003 020f 	and.w	r2, r3, #15
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004d90:	4b2f      	ldr	r3, [pc, #188]	@ (8004e50 <USBD_CDC_Init+0x1ec>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	f003 020f 	and.w	r2, r3, #15
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	3326      	adds	r3, #38	@ 0x26
 8004da6:	2210      	movs	r2, #16
 8004da8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004daa:	4b29      	ldr	r3, [pc, #164]	@ (8004e50 <USBD_CDC_Init+0x1ec>)
 8004dac:	7819      	ldrb	r1, [r3, #0]
 8004dae:	2308      	movs	r3, #8
 8004db0:	2203      	movs	r2, #3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f002 fae7 	bl	8007386 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004db8:	4b25      	ldr	r3, [pc, #148]	@ (8004e50 <USBD_CDC_Init+0x1ec>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	f003 020f 	and.w	r2, r3, #15
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	440b      	add	r3, r1
 8004dcc:	3324      	adds	r3, #36	@ 0x24
 8004dce:	2201      	movs	r2, #1
 8004dd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	33b0      	adds	r3, #176	@ 0xb0
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e018      	b.n	8004e3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	7c1b      	ldrb	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e14:	4b0d      	ldr	r3, [pc, #52]	@ (8004e4c <USBD_CDC_Init+0x1e8>)
 8004e16:	7819      	ldrb	r1, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f002 fb9e 	bl	8007564 <USBD_LL_PrepareReceive>
 8004e28:	e008      	b.n	8004e3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e2a:	4b08      	ldr	r3, [pc, #32]	@ (8004e4c <USBD_CDC_Init+0x1e8>)
 8004e2c:	7819      	ldrb	r1, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004e34:	2340      	movs	r3, #64	@ 0x40
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f002 fb94 	bl	8007564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000093 	.word	0x20000093
 8004e4c:	20000094 	.word	0x20000094
 8004e50:	20000095 	.word	0x20000095

08004e54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004e60:	4b3a      	ldr	r3, [pc, #232]	@ (8004f4c <USBD_CDC_DeInit+0xf8>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f002 fab3 	bl	80073d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004e6c:	4b37      	ldr	r3, [pc, #220]	@ (8004f4c <USBD_CDC_DeInit+0xf8>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	f003 020f 	and.w	r2, r3, #15
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	3324      	adds	r3, #36	@ 0x24
 8004e82:	2200      	movs	r2, #0
 8004e84:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004e86:	4b32      	ldr	r3, [pc, #200]	@ (8004f50 <USBD_CDC_DeInit+0xfc>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f002 faa0 	bl	80073d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004e92:	4b2f      	ldr	r3, [pc, #188]	@ (8004f50 <USBD_CDC_DeInit+0xfc>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	f003 020f 	and.w	r2, r3, #15
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004eaa:	2200      	movs	r2, #0
 8004eac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004eae:	4b29      	ldr	r3, [pc, #164]	@ (8004f54 <USBD_CDC_DeInit+0x100>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f002 fa8c 	bl	80073d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004eba:	4b26      	ldr	r3, [pc, #152]	@ (8004f54 <USBD_CDC_DeInit+0x100>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	f003 020f 	and.w	r2, r3, #15
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	3324      	adds	r3, #36	@ 0x24
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f54 <USBD_CDC_DeInit+0x100>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	f003 020f 	and.w	r2, r3, #15
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	3326      	adds	r3, #38	@ 0x26
 8004eea:	2200      	movs	r2, #0
 8004eec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	32b0      	adds	r2, #176	@ 0xb0
 8004ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01f      	beq.n	8004f40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	33b0      	adds	r3, #176	@ 0xb0
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	32b0      	adds	r2, #176	@ 0xb0
 8004f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f002 fb60 	bl	80075e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	32b0      	adds	r2, #176	@ 0xb0
 8004f32:	2100      	movs	r1, #0
 8004f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000093 	.word	0x20000093
 8004f50:	20000094 	.word	0x20000094
 8004f54:	20000095 	.word	0x20000095

08004f58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	32b0      	adds	r2, #176	@ 0xb0
 8004f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e0bf      	b.n	8005108 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d050      	beq.n	8005036 <USBD_CDC_Setup+0xde>
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	f040 80af 	bne.w	80050f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	88db      	ldrh	r3, [r3, #6]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d03a      	beq.n	8005018 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	b25b      	sxtb	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	da1b      	bge.n	8004fe4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	33b0      	adds	r3, #176	@ 0xb0
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004fc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	88d2      	ldrh	r2, [r2, #6]
 8004fc8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	88db      	ldrh	r3, [r3, #6]
 8004fce:	2b07      	cmp	r3, #7
 8004fd0:	bf28      	it	cs
 8004fd2:	2307      	movcs	r3, #7
 8004fd4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	89fa      	ldrh	r2, [r7, #14]
 8004fda:	4619      	mov	r1, r3
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f001 fd93 	bl	8006b08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004fe2:	e090      	b.n	8005106 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	785a      	ldrb	r2, [r3, #1]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	88db      	ldrh	r3, [r3, #6]
 8004ff2:	2b3f      	cmp	r3, #63	@ 0x3f
 8004ff4:	d803      	bhi.n	8004ffe <USBD_CDC_Setup+0xa6>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	88db      	ldrh	r3, [r3, #6]
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	e000      	b.n	8005000 <USBD_CDC_Setup+0xa8>
 8004ffe:	2240      	movs	r2, #64	@ 0x40
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005006:	6939      	ldr	r1, [r7, #16]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800500e:	461a      	mov	r2, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f001 fda5 	bl	8006b60 <USBD_CtlPrepareRx>
      break;
 8005016:	e076      	b.n	8005106 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	33b0      	adds	r3, #176	@ 0xb0
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	7850      	ldrb	r0, [r2, #1]
 800502e:	2200      	movs	r2, #0
 8005030:	6839      	ldr	r1, [r7, #0]
 8005032:	4798      	blx	r3
      break;
 8005034:	e067      	b.n	8005106 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	785b      	ldrb	r3, [r3, #1]
 800503a:	2b0b      	cmp	r3, #11
 800503c:	d851      	bhi.n	80050e2 <USBD_CDC_Setup+0x18a>
 800503e:	a201      	add	r2, pc, #4	@ (adr r2, 8005044 <USBD_CDC_Setup+0xec>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005075 	.word	0x08005075
 8005048:	080050f1 	.word	0x080050f1
 800504c:	080050e3 	.word	0x080050e3
 8005050:	080050e3 	.word	0x080050e3
 8005054:	080050e3 	.word	0x080050e3
 8005058:	080050e3 	.word	0x080050e3
 800505c:	080050e3 	.word	0x080050e3
 8005060:	080050e3 	.word	0x080050e3
 8005064:	080050e3 	.word	0x080050e3
 8005068:	080050e3 	.word	0x080050e3
 800506c:	0800509f 	.word	0x0800509f
 8005070:	080050c9 	.word	0x080050c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b03      	cmp	r3, #3
 800507e:	d107      	bne.n	8005090 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005080:	f107 030a 	add.w	r3, r7, #10
 8005084:	2202      	movs	r2, #2
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 fd3d 	bl	8006b08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800508e:	e032      	b.n	80050f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 fcbb 	bl	8006a0e <USBD_CtlError>
            ret = USBD_FAIL;
 8005098:	2303      	movs	r3, #3
 800509a:	75fb      	strb	r3, [r7, #23]
          break;
 800509c:	e02b      	b.n	80050f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d107      	bne.n	80050ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80050aa:	f107 030d 	add.w	r3, r7, #13
 80050ae:	2201      	movs	r2, #1
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f001 fd28 	bl	8006b08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050b8:	e01d      	b.n	80050f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80050ba:	6839      	ldr	r1, [r7, #0]
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f001 fca6 	bl	8006a0e <USBD_CtlError>
            ret = USBD_FAIL;
 80050c2:	2303      	movs	r3, #3
 80050c4:	75fb      	strb	r3, [r7, #23]
          break;
 80050c6:	e016      	b.n	80050f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d00f      	beq.n	80050f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80050d4:	6839      	ldr	r1, [r7, #0]
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f001 fc99 	bl	8006a0e <USBD_CtlError>
            ret = USBD_FAIL;
 80050dc:	2303      	movs	r3, #3
 80050de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80050e0:	e008      	b.n	80050f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80050e2:	6839      	ldr	r1, [r7, #0]
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f001 fc92 	bl	8006a0e <USBD_CtlError>
          ret = USBD_FAIL;
 80050ea:	2303      	movs	r3, #3
 80050ec:	75fb      	strb	r3, [r7, #23]
          break;
 80050ee:	e002      	b.n	80050f6 <USBD_CDC_Setup+0x19e>
          break;
 80050f0:	bf00      	nop
 80050f2:	e008      	b.n	8005106 <USBD_CDC_Setup+0x1ae>
          break;
 80050f4:	bf00      	nop
      }
      break;
 80050f6:	e006      	b.n	8005106 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f001 fc87 	bl	8006a0e <USBD_CtlError>
      ret = USBD_FAIL;
 8005100:	2303      	movs	r3, #3
 8005102:	75fb      	strb	r3, [r7, #23]
      break;
 8005104:	bf00      	nop
  }

  return (uint8_t)ret;
 8005106:	7dfb      	ldrb	r3, [r7, #23]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005122:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	32b0      	adds	r2, #176	@ 0xb0
 800512e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005136:	2303      	movs	r3, #3
 8005138:	e065      	b.n	8005206 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	32b0      	adds	r2, #176	@ 0xb0
 8005144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005148:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	f003 020f 	and.w	r2, r3, #15
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	3318      	adds	r3, #24
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d02f      	beq.n	80051c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	f003 020f 	and.w	r2, r3, #15
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	3318      	adds	r3, #24
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	78fb      	ldrb	r3, [r7, #3]
 800517c:	f003 010f 	and.w	r1, r3, #15
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	460b      	mov	r3, r1
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	440b      	add	r3, r1
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4403      	add	r3, r0
 800518c:	331c      	adds	r3, #28
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	fbb2 f1f3 	udiv	r1, r2, r3
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800519a:	2b00      	cmp	r3, #0
 800519c:	d112      	bne.n	80051c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	f003 020f 	and.w	r2, r3, #15
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	3318      	adds	r3, #24
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80051b6:	78f9      	ldrb	r1, [r7, #3]
 80051b8:	2300      	movs	r3, #0
 80051ba:	2200      	movs	r2, #0
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f002 f9b0 	bl	8007522 <USBD_LL_Transmit>
 80051c2:	e01f      	b.n	8005204 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	33b0      	adds	r3, #176	@ 0xb0
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d010      	beq.n	8005204 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	33b0      	adds	r3, #176	@ 0xb0
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005200:	78fa      	ldrb	r2, [r7, #3]
 8005202:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	460b      	mov	r3, r1
 8005218:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	32b0      	adds	r2, #176	@ 0xb0
 8005224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005228:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	32b0      	adds	r2, #176	@ 0xb0
 8005234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800523c:	2303      	movs	r3, #3
 800523e:	e01a      	b.n	8005276 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f002 f9ae 	bl	80075a6 <USBD_LL_GetRxDataSize>
 800524a:	4602      	mov	r2, r0
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	33b0      	adds	r3, #176	@ 0xb0
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005270:	4611      	mov	r1, r2
 8005272:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	32b0      	adds	r2, #176	@ 0xb0
 8005290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005294:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800529c:	2303      	movs	r3, #3
 800529e:	e024      	b.n	80052ea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	33b0      	adds	r3, #176	@ 0xb0
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d019      	beq.n	80052e8 <USBD_CDC_EP0_RxReady+0x6a>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80052ba:	2bff      	cmp	r3, #255	@ 0xff
 80052bc:	d014      	beq.n	80052e8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	33b0      	adds	r3, #176	@ 0xb0
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80052d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80052de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	22ff      	movs	r2, #255	@ 0xff
 80052e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052fc:	2182      	movs	r1, #130	@ 0x82
 80052fe:	4818      	ldr	r0, [pc, #96]	@ (8005360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005300:	f000 fd4f 	bl	8005da2 <USBD_GetEpDesc>
 8005304:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005306:	2101      	movs	r1, #1
 8005308:	4815      	ldr	r0, [pc, #84]	@ (8005360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800530a:	f000 fd4a 	bl	8005da2 <USBD_GetEpDesc>
 800530e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005310:	2181      	movs	r1, #129	@ 0x81
 8005312:	4813      	ldr	r0, [pc, #76]	@ (8005360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005314:	f000 fd45 	bl	8005da2 <USBD_GetEpDesc>
 8005318:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2210      	movs	r2, #16
 8005324:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d006      	beq.n	800533a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2200      	movs	r2, #0
 8005330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005334:	711a      	strb	r2, [r3, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d006      	beq.n	800534e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005348:	711a      	strb	r2, [r3, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2243      	movs	r2, #67	@ 0x43
 8005352:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005354:	4b02      	ldr	r3, [pc, #8]	@ (8005360 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000050 	.word	0x20000050

08005364 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800536c:	2182      	movs	r1, #130	@ 0x82
 800536e:	4818      	ldr	r0, [pc, #96]	@ (80053d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005370:	f000 fd17 	bl	8005da2 <USBD_GetEpDesc>
 8005374:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005376:	2101      	movs	r1, #1
 8005378:	4815      	ldr	r0, [pc, #84]	@ (80053d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800537a:	f000 fd12 	bl	8005da2 <USBD_GetEpDesc>
 800537e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005380:	2181      	movs	r1, #129	@ 0x81
 8005382:	4813      	ldr	r0, [pc, #76]	@ (80053d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005384:	f000 fd0d 	bl	8005da2 <USBD_GetEpDesc>
 8005388:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2210      	movs	r2, #16
 8005394:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d006      	beq.n	80053aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2200      	movs	r2, #0
 80053a0:	711a      	strb	r2, [r3, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f042 0202 	orr.w	r2, r2, #2
 80053a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d006      	beq.n	80053be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	711a      	strb	r2, [r3, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f042 0202 	orr.w	r2, r2, #2
 80053bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2243      	movs	r2, #67	@ 0x43
 80053c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053c4:	4b02      	ldr	r3, [pc, #8]	@ (80053d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000050 	.word	0x20000050

080053d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80053dc:	2182      	movs	r1, #130	@ 0x82
 80053de:	4818      	ldr	r0, [pc, #96]	@ (8005440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80053e0:	f000 fcdf 	bl	8005da2 <USBD_GetEpDesc>
 80053e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80053e6:	2101      	movs	r1, #1
 80053e8:	4815      	ldr	r0, [pc, #84]	@ (8005440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80053ea:	f000 fcda 	bl	8005da2 <USBD_GetEpDesc>
 80053ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80053f0:	2181      	movs	r1, #129	@ 0x81
 80053f2:	4813      	ldr	r0, [pc, #76]	@ (8005440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80053f4:	f000 fcd5 	bl	8005da2 <USBD_GetEpDesc>
 80053f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2210      	movs	r2, #16
 8005404:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d006      	beq.n	800541a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2200      	movs	r2, #0
 8005410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005414:	711a      	strb	r2, [r3, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d006      	beq.n	800542e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005428:	711a      	strb	r2, [r3, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2243      	movs	r2, #67	@ 0x43
 8005432:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005434:	4b02      	ldr	r3, [pc, #8]	@ (8005440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20000050 	.word	0x20000050

08005444 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	220a      	movs	r2, #10
 8005450:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005452:	4b03      	ldr	r3, [pc, #12]	@ (8005460 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	2000000c 	.word	0x2000000c

08005464 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005474:	2303      	movs	r3, #3
 8005476:	e009      	b.n	800548c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	33b0      	adds	r3, #176	@ 0xb0
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	32b0      	adds	r2, #176	@ 0xb0
 80054ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e008      	b.n	80054d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	32b0      	adds	r2, #176	@ 0xb0
 80054f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e004      	b.n	800550a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
	...

08005518 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	32b0      	adds	r2, #176	@ 0xb0
 800552a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800553a:	2303      	movs	r3, #3
 800553c:	e025      	b.n	800558a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005544:	2b00      	cmp	r3, #0
 8005546:	d11f      	bne.n	8005588 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2201      	movs	r2, #1
 800554c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005550:	4b10      	ldr	r3, [pc, #64]	@ (8005594 <USBD_CDC_TransmitPacket+0x7c>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	f003 020f 	and.w	r2, r3, #15
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4403      	add	r3, r0
 800556a:	3318      	adds	r3, #24
 800556c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800556e:	4b09      	ldr	r3, [pc, #36]	@ (8005594 <USBD_CDC_TransmitPacket+0x7c>)
 8005570:	7819      	ldrb	r1, [r3, #0]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f001 ffcf 	bl	8007522 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000093 	.word	0x20000093

08005598 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	32b0      	adds	r2, #176	@ 0xb0
 80055aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	32b0      	adds	r2, #176	@ 0xb0
 80055ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e018      	b.n	80055f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	7c1b      	ldrb	r3, [r3, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10a      	bne.n	80055e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80055ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005600 <USBD_CDC_ReceivePacket+0x68>)
 80055d0:	7819      	ldrb	r1, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80055d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 ffc1 	bl	8007564 <USBD_LL_PrepareReceive>
 80055e2:	e008      	b.n	80055f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80055e4:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <USBD_CDC_ReceivePacket+0x68>)
 80055e6:	7819      	ldrb	r1, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80055ee:	2340      	movs	r3, #64	@ 0x40
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f001 ffb7 	bl	8007564 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20000094 	.word	0x20000094

08005604 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	4613      	mov	r3, r2
 8005610:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005618:	2303      	movs	r3, #3
 800561a:	e01f      	b.n	800565c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	79fa      	ldrb	r2, [r7, #7]
 800564e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f001 fe31 	bl	80072b8 <USBD_LL_Init>
 8005656:	4603      	mov	r3, r0
 8005658:	75fb      	strb	r3, [r7, #23]

  return ret;
 800565a:	7dfb      	ldrb	r3, [r7, #23]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005678:	2303      	movs	r3, #3
 800567a:	e025      	b.n	80056c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	32ae      	adds	r2, #174	@ 0xae
 800568e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00f      	beq.n	80056b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	32ae      	adds	r2, #174	@ 0xae
 80056a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a8:	f107 020e 	add.w	r2, r7, #14
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
 80056b0:	4602      	mov	r2, r0
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 fe39 	bl	8007350 <USBD_LL_Start>
 80056de:	4603      	mov	r3, r0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80056f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	78fa      	ldrb	r2, [r7, #3]
 8005722:	4611      	mov	r1, r2
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	4798      	blx	r3
 8005728:	4603      	mov	r3, r0
 800572a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	460b      	mov	r3, r1
 8005740:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	78fa      	ldrb	r2, [r7, #3]
 8005750:	4611      	mov	r1, r2
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800575c:	2303      	movs	r3, #3
 800575e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f001 f90c 	bl	800699a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005790:	461a      	mov	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d01a      	beq.n	80057dc <USBD_LL_SetupStage+0x72>
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d822      	bhi.n	80057f0 <USBD_LL_SetupStage+0x86>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <USBD_LL_SetupStage+0x4a>
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d00a      	beq.n	80057c8 <USBD_LL_SetupStage+0x5e>
 80057b2:	e01d      	b.n	80057f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fb63 	bl	8005e88 <USBD_StdDevReq>
 80057c2:	4603      	mov	r3, r0
 80057c4:	73fb      	strb	r3, [r7, #15]
      break;
 80057c6:	e020      	b.n	800580a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fbcb 	bl	8005f6c <USBD_StdItfReq>
 80057d6:	4603      	mov	r3, r0
 80057d8:	73fb      	strb	r3, [r7, #15]
      break;
 80057da:	e016      	b.n	800580a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fc2d 	bl	8006044 <USBD_StdEPReq>
 80057ea:	4603      	mov	r3, r0
 80057ec:	73fb      	strb	r3, [r7, #15]
      break;
 80057ee:	e00c      	b.n	800580a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80057f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fe06 	bl	8007410 <USBD_LL_StallEP>
 8005804:	4603      	mov	r3, r0
 8005806:	73fb      	strb	r3, [r7, #15]
      break;
 8005808:	bf00      	nop
  }

  return ret;
 800580a:	7bfb      	ldrb	r3, [r7, #15]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	460b      	mov	r3, r1
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005826:	7afb      	ldrb	r3, [r7, #11]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d16e      	bne.n	800590a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005832:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800583a:	2b03      	cmp	r3, #3
 800583c:	f040 8098 	bne.w	8005970 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	429a      	cmp	r2, r3
 800584a:	d913      	bls.n	8005874 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	1ad2      	subs	r2, r2, r3
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	4293      	cmp	r3, r2
 8005864:	bf28      	it	cs
 8005866:	4613      	movcs	r3, r2
 8005868:	461a      	mov	r2, r3
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f001 f994 	bl	8006b9a <USBD_CtlContinueRx>
 8005872:	e07d      	b.n	8005970 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	2b02      	cmp	r3, #2
 8005880:	d014      	beq.n	80058ac <USBD_LL_DataOutStage+0x98>
 8005882:	2b02      	cmp	r3, #2
 8005884:	d81d      	bhi.n	80058c2 <USBD_LL_DataOutStage+0xae>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <USBD_LL_DataOutStage+0x7c>
 800588a:	2b01      	cmp	r3, #1
 800588c:	d003      	beq.n	8005896 <USBD_LL_DataOutStage+0x82>
 800588e:	e018      	b.n	80058c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	75bb      	strb	r3, [r7, #22]
            break;
 8005894:	e018      	b.n	80058c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800589c:	b2db      	uxtb	r3, r3
 800589e:	4619      	mov	r1, r3
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 fa64 	bl	8005d6e <USBD_CoreFindIF>
 80058a6:	4603      	mov	r3, r0
 80058a8:	75bb      	strb	r3, [r7, #22]
            break;
 80058aa:	e00d      	b.n	80058c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	4619      	mov	r1, r3
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 fa66 	bl	8005d88 <USBD_CoreFindEP>
 80058bc:	4603      	mov	r3, r0
 80058be:	75bb      	strb	r3, [r7, #22]
            break;
 80058c0:	e002      	b.n	80058c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	75bb      	strb	r3, [r7, #22]
            break;
 80058c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80058c8:	7dbb      	ldrb	r3, [r7, #22]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d119      	bne.n	8005902 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d113      	bne.n	8005902 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80058da:	7dba      	ldrb	r2, [r7, #22]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	32ae      	adds	r2, #174	@ 0xae
 80058e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80058ea:	7dba      	ldrb	r2, [r7, #22]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80058f2:	7dba      	ldrb	r2, [r7, #22]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	32ae      	adds	r2, #174	@ 0xae
 80058f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f001 f95a 	bl	8006bbc <USBD_CtlSendStatus>
 8005908:	e032      	b.n	8005970 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800590a:	7afb      	ldrb	r3, [r7, #11]
 800590c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005910:	b2db      	uxtb	r3, r3
 8005912:	4619      	mov	r1, r3
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 fa37 	bl	8005d88 <USBD_CoreFindEP>
 800591a:	4603      	mov	r3, r0
 800591c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800591e:	7dbb      	ldrb	r3, [r7, #22]
 8005920:	2bff      	cmp	r3, #255	@ 0xff
 8005922:	d025      	beq.n	8005970 <USBD_LL_DataOutStage+0x15c>
 8005924:	7dbb      	ldrb	r3, [r7, #22]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d122      	bne.n	8005970 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b03      	cmp	r3, #3
 8005934:	d117      	bne.n	8005966 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005936:	7dba      	ldrb	r2, [r7, #22]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	32ae      	adds	r2, #174	@ 0xae
 800593c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00f      	beq.n	8005966 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005946:	7dba      	ldrb	r2, [r7, #22]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800594e:	7dba      	ldrb	r2, [r7, #22]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	32ae      	adds	r2, #174	@ 0xae
 8005954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	7afa      	ldrb	r2, [r7, #11]
 800595c:	4611      	mov	r1, r2
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	4798      	blx	r3
 8005962:	4603      	mov	r3, r0
 8005964:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005966:	7dfb      	ldrb	r3, [r7, #23]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800596c:	7dfb      	ldrb	r3, [r7, #23]
 800596e:	e000      	b.n	8005972 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b086      	sub	sp, #24
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	460b      	mov	r3, r1
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005988:	7afb      	ldrb	r3, [r7, #11]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d16f      	bne.n	8005a6e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3314      	adds	r3, #20
 8005992:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800599a:	2b02      	cmp	r3, #2
 800599c:	d15a      	bne.n	8005a54 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d914      	bls.n	80059d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	1ad2      	subs	r2, r2, r3
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	461a      	mov	r2, r3
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f001 f8bc 	bl	8006b3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059c6:	2300      	movs	r3, #0
 80059c8:	2200      	movs	r2, #0
 80059ca:	2100      	movs	r1, #0
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f001 fdc9 	bl	8007564 <USBD_LL_PrepareReceive>
 80059d2:	e03f      	b.n	8005a54 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d11c      	bne.n	8005a1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d316      	bcc.n	8005a1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d20f      	bcs.n	8005a1a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80059fa:	2200      	movs	r2, #0
 80059fc:	2100      	movs	r1, #0
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f001 f89d 	bl	8006b3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2100      	movs	r1, #0
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f001 fda6 	bl	8007564 <USBD_LL_PrepareReceive>
 8005a18:	e01c      	b.n	8005a54 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d10f      	bne.n	8005a46 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d009      	beq.n	8005a46 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a46:	2180      	movs	r1, #128	@ 0x80
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f001 fce1 	bl	8007410 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f001 f8c7 	bl	8006be2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d03a      	beq.n	8005ad4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f7ff fe42 	bl	80056e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005a6c:	e032      	b.n	8005ad4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005a6e:	7afb      	ldrb	r3, [r7, #11]
 8005a70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	4619      	mov	r1, r3
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f985 	bl	8005d88 <USBD_CoreFindEP>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
 8005a84:	2bff      	cmp	r3, #255	@ 0xff
 8005a86:	d025      	beq.n	8005ad4 <USBD_LL_DataInStage+0x15a>
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d122      	bne.n	8005ad4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d11c      	bne.n	8005ad4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005a9a:	7dfa      	ldrb	r2, [r7, #23]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	32ae      	adds	r2, #174	@ 0xae
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d014      	beq.n	8005ad4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005aaa:	7dfa      	ldrb	r2, [r7, #23]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005ab2:	7dfa      	ldrb	r2, [r7, #23]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	32ae      	adds	r2, #174	@ 0xae
 8005ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	7afa      	ldrb	r2, [r7, #11]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	4798      	blx	r3
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005aca:	7dbb      	ldrb	r3, [r7, #22]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ad0:	7dbb      	ldrb	r3, [r7, #22]
 8005ad2:	e000      	b.n	8005ad6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d014      	beq.n	8005b44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00e      	beq.n	8005b44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6852      	ldr	r2, [r2, #4]
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	4611      	mov	r1, r2
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	4798      	blx	r3
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005b40:	2303      	movs	r3, #3
 8005b42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b44:	2340      	movs	r3, #64	@ 0x40
 8005b46:	2200      	movs	r2, #0
 8005b48:	2100      	movs	r1, #0
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 fc1b 	bl	8007386 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2240      	movs	r2, #64	@ 0x40
 8005b5c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b60:	2340      	movs	r3, #64	@ 0x40
 8005b62:	2200      	movs	r2, #0
 8005b64:	2180      	movs	r1, #128	@ 0x80
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 fc0d 	bl	8007386 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2240      	movs	r2, #64	@ 0x40
 8005b76:	621a      	str	r2, [r3, #32]

  return ret;
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	78fa      	ldrb	r2, [r7, #3]
 8005b92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d006      	beq.n	8005bc4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d106      	bne.n	8005bfc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b082      	sub	sp, #8
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d110      	bne.n	8005c40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d005      	beq.n	8005c40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	460b      	mov	r3, r1
 8005c54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	32ae      	adds	r2, #174	@ 0xae
 8005c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e01c      	b.n	8005ca6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d115      	bne.n	8005ca4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	32ae      	adds	r2, #174	@ 0xae
 8005c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00b      	beq.n	8005ca4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	32ae      	adds	r2, #174	@ 0xae
 8005c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	78fa      	ldrb	r2, [r7, #3]
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	32ae      	adds	r2, #174	@ 0xae
 8005cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e01c      	b.n	8005d0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d115      	bne.n	8005d08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	32ae      	adds	r2, #174	@ 0xae
 8005ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00b      	beq.n	8005d08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	32ae      	adds	r2, #174	@ 0xae
 8005cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	78fa      	ldrb	r2, [r7, #3]
 8005d02:	4611      	mov	r1, r2
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00e      	beq.n	8005d64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6852      	ldr	r2, [r2, #4]
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	4611      	mov	r1, r2
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	4798      	blx	r3
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005d60:	2303      	movs	r3, #3
 8005d62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	460b      	mov	r3, r1
 8005d78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b086      	sub	sp, #24
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	885b      	ldrh	r3, [r3, #2]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	7812      	ldrb	r2, [r2, #0]
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d91f      	bls.n	8005e08 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005dce:	e013      	b.n	8005df8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005dd0:	f107 030a 	add.w	r3, r7, #10
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6978      	ldr	r0, [r7, #20]
 8005dd8:	f000 f81b 	bl	8005e12 <USBD_GetNextDesc>
 8005ddc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	2b05      	cmp	r3, #5
 8005de4:	d108      	bne.n	8005df8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	789b      	ldrb	r3, [r3, #2]
 8005dee:	78fa      	ldrb	r2, [r7, #3]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d008      	beq.n	8005e06 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	885b      	ldrh	r3, [r3, #2]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	897b      	ldrh	r3, [r7, #10]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d8e5      	bhi.n	8005dd0 <USBD_GetEpDesc+0x2e>
 8005e04:	e000      	b.n	8005e08 <USBD_GetEpDesc+0x66>
          break;
 8005e06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005e08:	693b      	ldr	r3, [r7, #16]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	7812      	ldrb	r2, [r2, #0]
 8005e28:	4413      	add	r3, r2
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4413      	add	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b087      	sub	sp, #28
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e68:	8a3b      	ldrh	r3, [r7, #16]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	b21a      	sxth	r2, r3
 8005e6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	b21b      	sxth	r3, r3
 8005e76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005e78:	89fb      	ldrh	r3, [r7, #14]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ea0:	d005      	beq.n	8005eae <USBD_StdDevReq+0x26>
 8005ea2:	2b40      	cmp	r3, #64	@ 0x40
 8005ea4:	d857      	bhi.n	8005f56 <USBD_StdDevReq+0xce>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00f      	beq.n	8005eca <USBD_StdDevReq+0x42>
 8005eaa:	2b20      	cmp	r3, #32
 8005eac:	d153      	bne.n	8005f56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	32ae      	adds	r2, #174	@ 0xae
 8005eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	6839      	ldr	r1, [r7, #0]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	4798      	blx	r3
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ec8:	e04a      	b.n	8005f60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	785b      	ldrb	r3, [r3, #1]
 8005ece:	2b09      	cmp	r3, #9
 8005ed0:	d83b      	bhi.n	8005f4a <USBD_StdDevReq+0xc2>
 8005ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed8 <USBD_StdDevReq+0x50>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005f2d 	.word	0x08005f2d
 8005edc:	08005f41 	.word	0x08005f41
 8005ee0:	08005f4b 	.word	0x08005f4b
 8005ee4:	08005f37 	.word	0x08005f37
 8005ee8:	08005f4b 	.word	0x08005f4b
 8005eec:	08005f0b 	.word	0x08005f0b
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005f4b 	.word	0x08005f4b
 8005ef8:	08005f23 	.word	0x08005f23
 8005efc:	08005f15 	.word	0x08005f15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa3c 	bl	8006380 <USBD_GetDescriptor>
          break;
 8005f08:	e024      	b.n	8005f54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fba1 	bl	8006654 <USBD_SetAddress>
          break;
 8005f12:	e01f      	b.n	8005f54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fbe0 	bl	80066dc <USBD_SetConfig>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73fb      	strb	r3, [r7, #15]
          break;
 8005f20:	e018      	b.n	8005f54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fc83 	bl	8006830 <USBD_GetConfig>
          break;
 8005f2a:	e013      	b.n	8005f54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fcb4 	bl	800689c <USBD_GetStatus>
          break;
 8005f34:	e00e      	b.n	8005f54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fce3 	bl	8006904 <USBD_SetFeature>
          break;
 8005f3e:	e009      	b.n	8005f54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fd07 	bl	8006956 <USBD_ClrFeature>
          break;
 8005f48:	e004      	b.n	8005f54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fd5e 	bl	8006a0e <USBD_CtlError>
          break;
 8005f52:	bf00      	nop
      }
      break;
 8005f54:	e004      	b.n	8005f60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fd58 	bl	8006a0e <USBD_CtlError>
      break;
 8005f5e:	bf00      	nop
  }

  return ret;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop

08005f6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005f82:	2b40      	cmp	r3, #64	@ 0x40
 8005f84:	d005      	beq.n	8005f92 <USBD_StdItfReq+0x26>
 8005f86:	2b40      	cmp	r3, #64	@ 0x40
 8005f88:	d852      	bhi.n	8006030 <USBD_StdItfReq+0xc4>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <USBD_StdItfReq+0x26>
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d14e      	bne.n	8006030 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d840      	bhi.n	8006022 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	889b      	ldrh	r3, [r3, #4]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d836      	bhi.n	8006018 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	889b      	ldrh	r3, [r3, #4]
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff fedb 	bl	8005d6e <USBD_CoreFindIF>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fbc:	7bbb      	ldrb	r3, [r7, #14]
 8005fbe:	2bff      	cmp	r3, #255	@ 0xff
 8005fc0:	d01d      	beq.n	8005ffe <USBD_StdItfReq+0x92>
 8005fc2:	7bbb      	ldrb	r3, [r7, #14]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d11a      	bne.n	8005ffe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005fc8:	7bba      	ldrb	r2, [r7, #14]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	32ae      	adds	r2, #174	@ 0xae
 8005fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00f      	beq.n	8005ff8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005fd8:	7bba      	ldrb	r2, [r7, #14]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005fe0:	7bba      	ldrb	r2, [r7, #14]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	32ae      	adds	r2, #174	@ 0xae
 8005fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	4798      	blx	r3
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ff6:	e004      	b.n	8006002 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ffc:	e001      	b.n	8006002 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005ffe:	2303      	movs	r3, #3
 8006000:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	88db      	ldrh	r3, [r3, #6]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d110      	bne.n	800602c <USBD_StdItfReq+0xc0>
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10d      	bne.n	800602c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fdd3 	bl	8006bbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006016:	e009      	b.n	800602c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fcf7 	bl	8006a0e <USBD_CtlError>
          break;
 8006020:	e004      	b.n	800602c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fcf2 	bl	8006a0e <USBD_CtlError>
          break;
 800602a:	e000      	b.n	800602e <USBD_StdItfReq+0xc2>
          break;
 800602c:	bf00      	nop
      }
      break;
 800602e:	e004      	b.n	800603a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fceb 	bl	8006a0e <USBD_CtlError>
      break;
 8006038:	bf00      	nop
  }

  return ret;
 800603a:	7bfb      	ldrb	r3, [r7, #15]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	889b      	ldrh	r3, [r3, #4]
 8006056:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006060:	2b40      	cmp	r3, #64	@ 0x40
 8006062:	d007      	beq.n	8006074 <USBD_StdEPReq+0x30>
 8006064:	2b40      	cmp	r3, #64	@ 0x40
 8006066:	f200 817f 	bhi.w	8006368 <USBD_StdEPReq+0x324>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d02a      	beq.n	80060c4 <USBD_StdEPReq+0x80>
 800606e:	2b20      	cmp	r3, #32
 8006070:	f040 817a 	bne.w	8006368 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff fe85 	bl	8005d88 <USBD_CoreFindEP>
 800607e:	4603      	mov	r3, r0
 8006080:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006082:	7b7b      	ldrb	r3, [r7, #13]
 8006084:	2bff      	cmp	r3, #255	@ 0xff
 8006086:	f000 8174 	beq.w	8006372 <USBD_StdEPReq+0x32e>
 800608a:	7b7b      	ldrb	r3, [r7, #13]
 800608c:	2b00      	cmp	r3, #0
 800608e:	f040 8170 	bne.w	8006372 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006092:	7b7a      	ldrb	r2, [r7, #13]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800609a:	7b7a      	ldrb	r2, [r7, #13]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	32ae      	adds	r2, #174	@ 0xae
 80060a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 8163 	beq.w	8006372 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80060ac:	7b7a      	ldrb	r2, [r7, #13]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	32ae      	adds	r2, #174	@ 0xae
 80060b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	4798      	blx	r3
 80060be:	4603      	mov	r3, r0
 80060c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060c2:	e156      	b.n	8006372 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	785b      	ldrb	r3, [r3, #1]
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d008      	beq.n	80060de <USBD_StdEPReq+0x9a>
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	f300 8145 	bgt.w	800635c <USBD_StdEPReq+0x318>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 809b 	beq.w	800620e <USBD_StdEPReq+0x1ca>
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d03c      	beq.n	8006156 <USBD_StdEPReq+0x112>
 80060dc:	e13e      	b.n	800635c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d002      	beq.n	80060f0 <USBD_StdEPReq+0xac>
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d016      	beq.n	800611c <USBD_StdEPReq+0xd8>
 80060ee:	e02c      	b.n	800614a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00d      	beq.n	8006112 <USBD_StdEPReq+0xce>
 80060f6:	7bbb      	ldrb	r3, [r7, #14]
 80060f8:	2b80      	cmp	r3, #128	@ 0x80
 80060fa:	d00a      	beq.n	8006112 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 f985 	bl	8007410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006106:	2180      	movs	r1, #128	@ 0x80
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f001 f981 	bl	8007410 <USBD_LL_StallEP>
 800610e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006110:	e020      	b.n	8006154 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fc7a 	bl	8006a0e <USBD_CtlError>
              break;
 800611a:	e01b      	b.n	8006154 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	885b      	ldrh	r3, [r3, #2]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10e      	bne.n	8006142 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006124:	7bbb      	ldrb	r3, [r7, #14]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00b      	beq.n	8006142 <USBD_StdEPReq+0xfe>
 800612a:	7bbb      	ldrb	r3, [r7, #14]
 800612c:	2b80      	cmp	r3, #128	@ 0x80
 800612e:	d008      	beq.n	8006142 <USBD_StdEPReq+0xfe>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	88db      	ldrh	r3, [r3, #6]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d104      	bne.n	8006142 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006138:	7bbb      	ldrb	r3, [r7, #14]
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 f967 	bl	8007410 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fd3a 	bl	8006bbc <USBD_CtlSendStatus>

              break;
 8006148:	e004      	b.n	8006154 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fc5e 	bl	8006a0e <USBD_CtlError>
              break;
 8006152:	bf00      	nop
          }
          break;
 8006154:	e107      	b.n	8006366 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d002      	beq.n	8006168 <USBD_StdEPReq+0x124>
 8006162:	2b03      	cmp	r3, #3
 8006164:	d016      	beq.n	8006194 <USBD_StdEPReq+0x150>
 8006166:	e04b      	b.n	8006200 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006168:	7bbb      	ldrb	r3, [r7, #14]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00d      	beq.n	800618a <USBD_StdEPReq+0x146>
 800616e:	7bbb      	ldrb	r3, [r7, #14]
 8006170:	2b80      	cmp	r3, #128	@ 0x80
 8006172:	d00a      	beq.n	800618a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006174:	7bbb      	ldrb	r3, [r7, #14]
 8006176:	4619      	mov	r1, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 f949 	bl	8007410 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800617e:	2180      	movs	r1, #128	@ 0x80
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f001 f945 	bl	8007410 <USBD_LL_StallEP>
 8006186:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006188:	e040      	b.n	800620c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fc3e 	bl	8006a0e <USBD_CtlError>
              break;
 8006192:	e03b      	b.n	800620c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	885b      	ldrh	r3, [r3, #2]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d136      	bne.n	800620a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800619c:	7bbb      	ldrb	r3, [r7, #14]
 800619e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d004      	beq.n	80061b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80061a6:	7bbb      	ldrb	r3, [r7, #14]
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 f94f 	bl	800744e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fd03 	bl	8006bbc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80061b6:	7bbb      	ldrb	r3, [r7, #14]
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff fde4 	bl	8005d88 <USBD_CoreFindEP>
 80061c0:	4603      	mov	r3, r0
 80061c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061c4:	7b7b      	ldrb	r3, [r7, #13]
 80061c6:	2bff      	cmp	r3, #255	@ 0xff
 80061c8:	d01f      	beq.n	800620a <USBD_StdEPReq+0x1c6>
 80061ca:	7b7b      	ldrb	r3, [r7, #13]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d11c      	bne.n	800620a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80061d0:	7b7a      	ldrb	r2, [r7, #13]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80061d8:	7b7a      	ldrb	r2, [r7, #13]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	32ae      	adds	r2, #174	@ 0xae
 80061de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d010      	beq.n	800620a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061e8:	7b7a      	ldrb	r2, [r7, #13]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	32ae      	adds	r2, #174	@ 0xae
 80061ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
 80061fa:	4603      	mov	r3, r0
 80061fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80061fe:	e004      	b.n	800620a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fc03 	bl	8006a0e <USBD_CtlError>
              break;
 8006208:	e000      	b.n	800620c <USBD_StdEPReq+0x1c8>
              break;
 800620a:	bf00      	nop
          }
          break;
 800620c:	e0ab      	b.n	8006366 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d002      	beq.n	8006220 <USBD_StdEPReq+0x1dc>
 800621a:	2b03      	cmp	r3, #3
 800621c:	d032      	beq.n	8006284 <USBD_StdEPReq+0x240>
 800621e:	e097      	b.n	8006350 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006220:	7bbb      	ldrb	r3, [r7, #14]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <USBD_StdEPReq+0x1f2>
 8006226:	7bbb      	ldrb	r3, [r7, #14]
 8006228:	2b80      	cmp	r3, #128	@ 0x80
 800622a:	d004      	beq.n	8006236 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fbed 	bl	8006a0e <USBD_CtlError>
                break;
 8006234:	e091      	b.n	800635a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006236:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800623a:	2b00      	cmp	r3, #0
 800623c:	da0b      	bge.n	8006256 <USBD_StdEPReq+0x212>
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	3310      	adds	r3, #16
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	3304      	adds	r3, #4
 8006254:	e00b      	b.n	800626e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006256:	7bbb      	ldrb	r3, [r7, #14]
 8006258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	4413      	add	r3, r2
 800626c:	3304      	adds	r3, #4
 800626e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2202      	movs	r2, #2
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fc43 	bl	8006b08 <USBD_CtlSendData>
              break;
 8006282:	e06a      	b.n	800635a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006284:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006288:	2b00      	cmp	r3, #0
 800628a:	da11      	bge.n	80062b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800628c:	7bbb      	ldrb	r3, [r7, #14]
 800628e:	f003 020f 	and.w	r2, r3, #15
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	3324      	adds	r3, #36	@ 0x24
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d117      	bne.n	80062d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fbb0 	bl	8006a0e <USBD_CtlError>
                  break;
 80062ae:	e054      	b.n	800635a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80062b0:	7bbb      	ldrb	r3, [r7, #14]
 80062b2:	f003 020f 	and.w	r2, r3, #15
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fb9d 	bl	8006a0e <USBD_CtlError>
                  break;
 80062d4:	e041      	b.n	800635a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	da0b      	bge.n	80062f6 <USBD_StdEPReq+0x2b2>
 80062de:	7bbb      	ldrb	r3, [r7, #14]
 80062e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	3310      	adds	r3, #16
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	3304      	adds	r3, #4
 80062f4:	e00b      	b.n	800630e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	4413      	add	r3, r2
 800630c:	3304      	adds	r3, #4
 800630e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006310:	7bbb      	ldrb	r3, [r7, #14]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <USBD_StdEPReq+0x2d8>
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	2b80      	cmp	r3, #128	@ 0x80
 800631a:	d103      	bne.n	8006324 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	e00e      	b.n	8006342 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006324:	7bbb      	ldrb	r3, [r7, #14]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 f8af 	bl	800748c <USBD_LL_IsStallEP>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e002      	b.n	8006342 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2202      	movs	r2, #2
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fbdd 	bl	8006b08 <USBD_CtlSendData>
              break;
 800634e:	e004      	b.n	800635a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fb5b 	bl	8006a0e <USBD_CtlError>
              break;
 8006358:	bf00      	nop
          }
          break;
 800635a:	e004      	b.n	8006366 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fb55 	bl	8006a0e <USBD_CtlError>
          break;
 8006364:	bf00      	nop
      }
      break;
 8006366:	e005      	b.n	8006374 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fb4f 	bl	8006a0e <USBD_CtlError>
      break;
 8006370:	e000      	b.n	8006374 <USBD_StdEPReq+0x330>
      break;
 8006372:	bf00      	nop
  }

  return ret;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	885b      	ldrh	r3, [r3, #2]
 800639a:	0a1b      	lsrs	r3, r3, #8
 800639c:	b29b      	uxth	r3, r3
 800639e:	3b01      	subs	r3, #1
 80063a0:	2b06      	cmp	r3, #6
 80063a2:	f200 8128 	bhi.w	80065f6 <USBD_GetDescriptor+0x276>
 80063a6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <USBD_GetDescriptor+0x2c>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063c9 	.word	0x080063c9
 80063b0:	080063e1 	.word	0x080063e1
 80063b4:	08006421 	.word	0x08006421
 80063b8:	080065f7 	.word	0x080065f7
 80063bc:	080065f7 	.word	0x080065f7
 80063c0:	08006597 	.word	0x08006597
 80063c4:	080065c3 	.word	0x080065c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	7c12      	ldrb	r2, [r2, #16]
 80063d4:	f107 0108 	add.w	r1, r7, #8
 80063d8:	4610      	mov	r0, r2
 80063da:	4798      	blx	r3
 80063dc:	60f8      	str	r0, [r7, #12]
      break;
 80063de:	e112      	b.n	8006606 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	7c1b      	ldrb	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10d      	bne.n	8006404 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f0:	f107 0208 	add.w	r2, r7, #8
 80063f4:	4610      	mov	r0, r2
 80063f6:	4798      	blx	r3
 80063f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3301      	adds	r3, #1
 80063fe:	2202      	movs	r2, #2
 8006400:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006402:	e100      	b.n	8006606 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800640a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640c:	f107 0208 	add.w	r2, r7, #8
 8006410:	4610      	mov	r0, r2
 8006412:	4798      	blx	r3
 8006414:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3301      	adds	r3, #1
 800641a:	2202      	movs	r2, #2
 800641c:	701a      	strb	r2, [r3, #0]
      break;
 800641e:	e0f2      	b.n	8006606 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	885b      	ldrh	r3, [r3, #2]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b05      	cmp	r3, #5
 8006428:	f200 80ac 	bhi.w	8006584 <USBD_GetDescriptor+0x204>
 800642c:	a201      	add	r2, pc, #4	@ (adr r2, 8006434 <USBD_GetDescriptor+0xb4>)
 800642e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006432:	bf00      	nop
 8006434:	0800644d 	.word	0x0800644d
 8006438:	08006481 	.word	0x08006481
 800643c:	080064b5 	.word	0x080064b5
 8006440:	080064e9 	.word	0x080064e9
 8006444:	0800651d 	.word	0x0800651d
 8006448:	08006551 	.word	0x08006551
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	7c12      	ldrb	r2, [r2, #16]
 8006464:	f107 0108 	add.w	r1, r7, #8
 8006468:	4610      	mov	r0, r2
 800646a:	4798      	blx	r3
 800646c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800646e:	e091      	b.n	8006594 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 facb 	bl	8006a0e <USBD_CtlError>
            err++;
 8006478:	7afb      	ldrb	r3, [r7, #11]
 800647a:	3301      	adds	r3, #1
 800647c:	72fb      	strb	r3, [r7, #11]
          break;
 800647e:	e089      	b.n	8006594 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00b      	beq.n	80064a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	7c12      	ldrb	r2, [r2, #16]
 8006498:	f107 0108 	add.w	r1, r7, #8
 800649c:	4610      	mov	r0, r2
 800649e:	4798      	blx	r3
 80064a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064a2:	e077      	b.n	8006594 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fab1 	bl	8006a0e <USBD_CtlError>
            err++;
 80064ac:	7afb      	ldrb	r3, [r7, #11]
 80064ae:	3301      	adds	r3, #1
 80064b0:	72fb      	strb	r3, [r7, #11]
          break;
 80064b2:	e06f      	b.n	8006594 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00b      	beq.n	80064d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	7c12      	ldrb	r2, [r2, #16]
 80064cc:	f107 0108 	add.w	r1, r7, #8
 80064d0:	4610      	mov	r0, r2
 80064d2:	4798      	blx	r3
 80064d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064d6:	e05d      	b.n	8006594 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fa97 	bl	8006a0e <USBD_CtlError>
            err++;
 80064e0:	7afb      	ldrb	r3, [r7, #11]
 80064e2:	3301      	adds	r3, #1
 80064e4:	72fb      	strb	r3, [r7, #11]
          break;
 80064e6:	e055      	b.n	8006594 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	7c12      	ldrb	r2, [r2, #16]
 8006500:	f107 0108 	add.w	r1, r7, #8
 8006504:	4610      	mov	r0, r2
 8006506:	4798      	blx	r3
 8006508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800650a:	e043      	b.n	8006594 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa7d 	bl	8006a0e <USBD_CtlError>
            err++;
 8006514:	7afb      	ldrb	r3, [r7, #11]
 8006516:	3301      	adds	r3, #1
 8006518:	72fb      	strb	r3, [r7, #11]
          break;
 800651a:	e03b      	b.n	8006594 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	7c12      	ldrb	r2, [r2, #16]
 8006534:	f107 0108 	add.w	r1, r7, #8
 8006538:	4610      	mov	r0, r2
 800653a:	4798      	blx	r3
 800653c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800653e:	e029      	b.n	8006594 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa63 	bl	8006a0e <USBD_CtlError>
            err++;
 8006548:	7afb      	ldrb	r3, [r7, #11]
 800654a:	3301      	adds	r3, #1
 800654c:	72fb      	strb	r3, [r7, #11]
          break;
 800654e:	e021      	b.n	8006594 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	7c12      	ldrb	r2, [r2, #16]
 8006568:	f107 0108 	add.w	r1, r7, #8
 800656c:	4610      	mov	r0, r2
 800656e:	4798      	blx	r3
 8006570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006572:	e00f      	b.n	8006594 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fa49 	bl	8006a0e <USBD_CtlError>
            err++;
 800657c:	7afb      	ldrb	r3, [r7, #11]
 800657e:	3301      	adds	r3, #1
 8006580:	72fb      	strb	r3, [r7, #11]
          break;
 8006582:	e007      	b.n	8006594 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa41 	bl	8006a0e <USBD_CtlError>
          err++;
 800658c:	7afb      	ldrb	r3, [r7, #11]
 800658e:	3301      	adds	r3, #1
 8006590:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006592:	bf00      	nop
      }
      break;
 8006594:	e037      	b.n	8006606 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	7c1b      	ldrb	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d109      	bne.n	80065b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a6:	f107 0208 	add.w	r2, r7, #8
 80065aa:	4610      	mov	r0, r2
 80065ac:	4798      	blx	r3
 80065ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065b0:	e029      	b.n	8006606 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fa2a 	bl	8006a0e <USBD_CtlError>
        err++;
 80065ba:	7afb      	ldrb	r3, [r7, #11]
 80065bc:	3301      	adds	r3, #1
 80065be:	72fb      	strb	r3, [r7, #11]
      break;
 80065c0:	e021      	b.n	8006606 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	7c1b      	ldrb	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10d      	bne.n	80065e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d2:	f107 0208 	add.w	r2, r7, #8
 80065d6:	4610      	mov	r0, r2
 80065d8:	4798      	blx	r3
 80065da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3301      	adds	r3, #1
 80065e0:	2207      	movs	r2, #7
 80065e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065e4:	e00f      	b.n	8006606 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fa10 	bl	8006a0e <USBD_CtlError>
        err++;
 80065ee:	7afb      	ldrb	r3, [r7, #11]
 80065f0:	3301      	adds	r3, #1
 80065f2:	72fb      	strb	r3, [r7, #11]
      break;
 80065f4:	e007      	b.n	8006606 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fa08 	bl	8006a0e <USBD_CtlError>
      err++;
 80065fe:	7afb      	ldrb	r3, [r7, #11]
 8006600:	3301      	adds	r3, #1
 8006602:	72fb      	strb	r3, [r7, #11]
      break;
 8006604:	bf00      	nop
  }

  if (err != 0U)
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d11e      	bne.n	800664a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	88db      	ldrh	r3, [r3, #6]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d016      	beq.n	8006642 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006614:	893b      	ldrh	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00e      	beq.n	8006638 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	88da      	ldrh	r2, [r3, #6]
 800661e:	893b      	ldrh	r3, [r7, #8]
 8006620:	4293      	cmp	r3, r2
 8006622:	bf28      	it	cs
 8006624:	4613      	movcs	r3, r2
 8006626:	b29b      	uxth	r3, r3
 8006628:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800662a:	893b      	ldrh	r3, [r7, #8]
 800662c:	461a      	mov	r2, r3
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fa69 	bl	8006b08 <USBD_CtlSendData>
 8006636:	e009      	b.n	800664c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f9e7 	bl	8006a0e <USBD_CtlError>
 8006640:	e004      	b.n	800664c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 faba 	bl	8006bbc <USBD_CtlSendStatus>
 8006648:	e000      	b.n	800664c <USBD_GetDescriptor+0x2cc>
    return;
 800664a:	bf00      	nop
  }
}
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop

08006654 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	889b      	ldrh	r3, [r3, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d131      	bne.n	80066ca <USBD_SetAddress+0x76>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	88db      	ldrh	r3, [r3, #6]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d12d      	bne.n	80066ca <USBD_SetAddress+0x76>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	885b      	ldrh	r3, [r3, #2]
 8006672:	2b7f      	cmp	r3, #127	@ 0x7f
 8006674:	d829      	bhi.n	80066ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	885b      	ldrh	r3, [r3, #2]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006680:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b03      	cmp	r3, #3
 800668c:	d104      	bne.n	8006698 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f9bc 	bl	8006a0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006696:	e01d      	b.n	80066d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	7bfa      	ldrb	r2, [r7, #15]
 800669c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 ff1d 	bl	80074e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fa86 	bl	8006bbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d004      	beq.n	80066c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2202      	movs	r2, #2
 80066ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066be:	e009      	b.n	80066d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c8:	e004      	b.n	80066d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f99e 	bl	8006a0e <USBD_CtlError>
  }
}
 80066d2:	bf00      	nop
 80066d4:	bf00      	nop
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	885b      	ldrh	r3, [r3, #2]
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	4b4e      	ldr	r3, [pc, #312]	@ (800682c <USBD_SetConfig+0x150>)
 80066f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80066f4:	4b4d      	ldr	r3, [pc, #308]	@ (800682c <USBD_SetConfig+0x150>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d905      	bls.n	8006708 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f985 	bl	8006a0e <USBD_CtlError>
    return USBD_FAIL;
 8006704:	2303      	movs	r3, #3
 8006706:	e08c      	b.n	8006822 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b02      	cmp	r3, #2
 8006712:	d002      	beq.n	800671a <USBD_SetConfig+0x3e>
 8006714:	2b03      	cmp	r3, #3
 8006716:	d029      	beq.n	800676c <USBD_SetConfig+0x90>
 8006718:	e075      	b.n	8006806 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800671a:	4b44      	ldr	r3, [pc, #272]	@ (800682c <USBD_SetConfig+0x150>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d020      	beq.n	8006764 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006722:	4b42      	ldr	r3, [pc, #264]	@ (800682c <USBD_SetConfig+0x150>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800672c:	4b3f      	ldr	r3, [pc, #252]	@ (800682c <USBD_SetConfig+0x150>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fe ffe3 	bl	80056fe <USBD_SetClassConfig>
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d008      	beq.n	8006754 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f962 	bl	8006a0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2202      	movs	r2, #2
 800674e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006752:	e065      	b.n	8006820 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fa31 	bl	8006bbc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2203      	movs	r2, #3
 800675e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006762:	e05d      	b.n	8006820 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fa29 	bl	8006bbc <USBD_CtlSendStatus>
      break;
 800676a:	e059      	b.n	8006820 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800676c:	4b2f      	ldr	r3, [pc, #188]	@ (800682c <USBD_SetConfig+0x150>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d112      	bne.n	800679a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800677c:	4b2b      	ldr	r3, [pc, #172]	@ (800682c <USBD_SetConfig+0x150>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006786:	4b29      	ldr	r3, [pc, #164]	@ (800682c <USBD_SetConfig+0x150>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7fe ffd2 	bl	8005736 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa12 	bl	8006bbc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006798:	e042      	b.n	8006820 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800679a:	4b24      	ldr	r3, [pc, #144]	@ (800682c <USBD_SetConfig+0x150>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d02a      	beq.n	80067fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7fe ffc0 	bl	8005736 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80067b6:	4b1d      	ldr	r3, [pc, #116]	@ (800682c <USBD_SetConfig+0x150>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80067c0:	4b1a      	ldr	r3, [pc, #104]	@ (800682c <USBD_SetConfig+0x150>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7fe ff99 	bl	80056fe <USBD_SetClassConfig>
 80067cc:	4603      	mov	r3, r0
 80067ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00f      	beq.n	80067f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f918 	bl	8006a0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fe ffa5 	bl	8005736 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80067f4:	e014      	b.n	8006820 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f9e0 	bl	8006bbc <USBD_CtlSendStatus>
      break;
 80067fc:	e010      	b.n	8006820 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f9dc 	bl	8006bbc <USBD_CtlSendStatus>
      break;
 8006804:	e00c      	b.n	8006820 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f900 	bl	8006a0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800680e:	4b07      	ldr	r3, [pc, #28]	@ (800682c <USBD_SetConfig+0x150>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7fe ff8e 	bl	8005736 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800681a:	2303      	movs	r3, #3
 800681c:	73fb      	strb	r3, [r7, #15]
      break;
 800681e:	bf00      	nop
  }

  return ret;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000390 	.word	0x20000390

08006830 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	88db      	ldrh	r3, [r3, #6]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d004      	beq.n	800684c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f8e2 	bl	8006a0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800684a:	e023      	b.n	8006894 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	dc02      	bgt.n	800685e <USBD_GetConfig+0x2e>
 8006858:	2b00      	cmp	r3, #0
 800685a:	dc03      	bgt.n	8006864 <USBD_GetConfig+0x34>
 800685c:	e015      	b.n	800688a <USBD_GetConfig+0x5a>
 800685e:	2b03      	cmp	r3, #3
 8006860:	d00b      	beq.n	800687a <USBD_GetConfig+0x4a>
 8006862:	e012      	b.n	800688a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3308      	adds	r3, #8
 800686e:	2201      	movs	r2, #1
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f948 	bl	8006b08 <USBD_CtlSendData>
        break;
 8006878:	e00c      	b.n	8006894 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3304      	adds	r3, #4
 800687e:	2201      	movs	r2, #1
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f940 	bl	8006b08 <USBD_CtlSendData>
        break;
 8006888:	e004      	b.n	8006894 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f8be 	bl	8006a0e <USBD_CtlError>
        break;
 8006892:	bf00      	nop
}
 8006894:	bf00      	nop
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d81e      	bhi.n	80068f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	88db      	ldrh	r3, [r3, #6]
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d004      	beq.n	80068c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f8a5 	bl	8006a0e <USBD_CtlError>
        break;
 80068c4:	e01a      	b.n	80068fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f043 0202 	orr.w	r2, r3, #2
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	330c      	adds	r3, #12
 80068e6:	2202      	movs	r2, #2
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f90c 	bl	8006b08 <USBD_CtlSendData>
      break;
 80068f0:	e004      	b.n	80068fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f88a 	bl	8006a0e <USBD_CtlError>
      break;
 80068fa:	bf00      	nop
  }
}
 80068fc:	bf00      	nop
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	885b      	ldrh	r3, [r3, #2]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d107      	bne.n	8006926 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f94c 	bl	8006bbc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006924:	e013      	b.n	800694e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	885b      	ldrh	r3, [r3, #2]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d10b      	bne.n	8006946 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	889b      	ldrh	r3, [r3, #4]
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	b29b      	uxth	r3, r3
 8006936:	b2da      	uxtb	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f93c 	bl	8006bbc <USBD_CtlSendStatus>
}
 8006944:	e003      	b.n	800694e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f860 	bl	8006a0e <USBD_CtlError>
}
 800694e:	bf00      	nop
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006966:	b2db      	uxtb	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	2b02      	cmp	r3, #2
 800696c:	d80b      	bhi.n	8006986 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	885b      	ldrh	r3, [r3, #2]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d10c      	bne.n	8006990 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f91c 	bl	8006bbc <USBD_CtlSendStatus>
      }
      break;
 8006984:	e004      	b.n	8006990 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f840 	bl	8006a0e <USBD_CtlError>
      break;
 800698e:	e000      	b.n	8006992 <USBD_ClrFeature+0x3c>
      break;
 8006990:	bf00      	nop
  }
}
 8006992:	bf00      	nop
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	781a      	ldrb	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3301      	adds	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f7ff fa40 	bl	8005e4a <SWAPBYTE>
 80069ca:	4603      	mov	r3, r0
 80069cc:	461a      	mov	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3301      	adds	r3, #1
 80069d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3301      	adds	r3, #1
 80069dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f7ff fa33 	bl	8005e4a <SWAPBYTE>
 80069e4:	4603      	mov	r3, r0
 80069e6:	461a      	mov	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3301      	adds	r3, #1
 80069f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff fa26 	bl	8005e4a <SWAPBYTE>
 80069fe:	4603      	mov	r3, r0
 8006a00:	461a      	mov	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	80da      	strh	r2, [r3, #6]
}
 8006a06:	bf00      	nop
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b082      	sub	sp, #8
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a18:	2180      	movs	r1, #128	@ 0x80
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fcf8 	bl	8007410 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006a20:	2100      	movs	r1, #0
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fcf4 	bl	8007410 <USBD_LL_StallEP>
}
 8006a28:	bf00      	nop
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d042      	beq.n	8006acc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006a4a:	6938      	ldr	r0, [r7, #16]
 8006a4c:	f000 f842 	bl	8006ad4 <USBD_GetLen>
 8006a50:	4603      	mov	r3, r0
 8006a52:	3301      	adds	r3, #1
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a5a:	d808      	bhi.n	8006a6e <USBD_GetString+0x3e>
 8006a5c:	6938      	ldr	r0, [r7, #16]
 8006a5e:	f000 f839 	bl	8006ad4 <USBD_GetLen>
 8006a62:	4603      	mov	r3, r0
 8006a64:	3301      	adds	r3, #1
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	e001      	b.n	8006a72 <USBD_GetString+0x42>
 8006a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	7812      	ldrb	r2, [r2, #0]
 8006a80:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
 8006a84:	3301      	adds	r3, #1
 8006a86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a88:	7dfb      	ldrb	r3, [r7, #23]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	2203      	movs	r2, #3
 8006a90:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a92:	7dfb      	ldrb	r3, [r7, #23]
 8006a94:	3301      	adds	r3, #1
 8006a96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a98:	e013      	b.n	8006ac2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	7812      	ldrb	r2, [r2, #0]
 8006aa4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	613b      	str	r3, [r7, #16]
    idx++;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
    idx++;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e7      	bne.n	8006a9a <USBD_GetString+0x6a>
 8006aca:	e000      	b.n	8006ace <USBD_GetString+0x9e>
    return;
 8006acc:	bf00      	nop
  }
}
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ae4:	e005      	b.n	8006af2 <USBD_GetLen+0x1e>
  {
    len++;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	3301      	adds	r3, #1
 8006af0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f5      	bne.n	8006ae6 <USBD_GetLen+0x12>
  }

  return len;
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fcf7 	bl	8007522 <USBD_LL_Transmit>

  return USBD_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	2100      	movs	r1, #0
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 fce6 	bl	8007522 <USBD_LL_Transmit>

  return USBD_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2203      	movs	r2, #3
 8006b70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	2100      	movs	r1, #0
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fcea 	bl	8007564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	2100      	movs	r1, #0
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 fcd9 	bl	8007564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2204      	movs	r2, #4
 8006bc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006bcc:	2300      	movs	r3, #0
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fca5 	bl	8007522 <USBD_LL_Transmit>

  return USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2205      	movs	r2, #5
 8006bee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fcb3 	bl	8007564 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4912      	ldr	r1, [pc, #72]	@ (8006c58 <MX_USB_DEVICE_Init+0x50>)
 8006c10:	4812      	ldr	r0, [pc, #72]	@ (8006c5c <MX_USB_DEVICE_Init+0x54>)
 8006c12:	f7fe fcf7 	bl	8005604 <USBD_Init>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c1c:	f7f9 ff1a 	bl	8000a54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006c20:	490f      	ldr	r1, [pc, #60]	@ (8006c60 <MX_USB_DEVICE_Init+0x58>)
 8006c22:	480e      	ldr	r0, [pc, #56]	@ (8006c5c <MX_USB_DEVICE_Init+0x54>)
 8006c24:	f7fe fd1e 	bl	8005664 <USBD_RegisterClass>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006c2e:	f7f9 ff11 	bl	8000a54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006c32:	490c      	ldr	r1, [pc, #48]	@ (8006c64 <MX_USB_DEVICE_Init+0x5c>)
 8006c34:	4809      	ldr	r0, [pc, #36]	@ (8006c5c <MX_USB_DEVICE_Init+0x54>)
 8006c36:	f7fe fc15 	bl	8005464 <USBD_CDC_RegisterInterface>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006c40:	f7f9 ff08 	bl	8000a54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c44:	4805      	ldr	r0, [pc, #20]	@ (8006c5c <MX_USB_DEVICE_Init+0x54>)
 8006c46:	f7fe fd43 	bl	80056d0 <USBD_Start>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006c50:	f7f9 ff00 	bl	8000a54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c54:	bf00      	nop
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	200000ac 	.word	0x200000ac
 8006c5c:	20000394 	.word	0x20000394
 8006c60:	20000018 	.word	0x20000018
 8006c64:	20000098 	.word	0x20000098

08006c68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4905      	ldr	r1, [pc, #20]	@ (8006c84 <CDC_Init_FS+0x1c>)
 8006c70:	4805      	ldr	r0, [pc, #20]	@ (8006c88 <CDC_Init_FS+0x20>)
 8006c72:	f7fe fc11 	bl	8005498 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006c76:	4905      	ldr	r1, [pc, #20]	@ (8006c8c <CDC_Init_FS+0x24>)
 8006c78:	4803      	ldr	r0, [pc, #12]	@ (8006c88 <CDC_Init_FS+0x20>)
 8006c7a:	f7fe fc2f 	bl	80054dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006c7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000a70 	.word	0x20000a70
 8006c88:	20000394 	.word	0x20000394
 8006c8c:	20000670 	.word	0x20000670

08006c90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	6039      	str	r1, [r7, #0]
 8006caa:	71fb      	strb	r3, [r7, #7]
 8006cac:	4613      	mov	r3, r2
 8006cae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	2b23      	cmp	r3, #35	@ 0x23
 8006cb4:	d84a      	bhi.n	8006d4c <CDC_Control_FS+0xac>
 8006cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cbc <CDC_Control_FS+0x1c>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006d4d 	.word	0x08006d4d
 8006cc0:	08006d4d 	.word	0x08006d4d
 8006cc4:	08006d4d 	.word	0x08006d4d
 8006cc8:	08006d4d 	.word	0x08006d4d
 8006ccc:	08006d4d 	.word	0x08006d4d
 8006cd0:	08006d4d 	.word	0x08006d4d
 8006cd4:	08006d4d 	.word	0x08006d4d
 8006cd8:	08006d4d 	.word	0x08006d4d
 8006cdc:	08006d4d 	.word	0x08006d4d
 8006ce0:	08006d4d 	.word	0x08006d4d
 8006ce4:	08006d4d 	.word	0x08006d4d
 8006ce8:	08006d4d 	.word	0x08006d4d
 8006cec:	08006d4d 	.word	0x08006d4d
 8006cf0:	08006d4d 	.word	0x08006d4d
 8006cf4:	08006d4d 	.word	0x08006d4d
 8006cf8:	08006d4d 	.word	0x08006d4d
 8006cfc:	08006d4d 	.word	0x08006d4d
 8006d00:	08006d4d 	.word	0x08006d4d
 8006d04:	08006d4d 	.word	0x08006d4d
 8006d08:	08006d4d 	.word	0x08006d4d
 8006d0c:	08006d4d 	.word	0x08006d4d
 8006d10:	08006d4d 	.word	0x08006d4d
 8006d14:	08006d4d 	.word	0x08006d4d
 8006d18:	08006d4d 	.word	0x08006d4d
 8006d1c:	08006d4d 	.word	0x08006d4d
 8006d20:	08006d4d 	.word	0x08006d4d
 8006d24:	08006d4d 	.word	0x08006d4d
 8006d28:	08006d4d 	.word	0x08006d4d
 8006d2c:	08006d4d 	.word	0x08006d4d
 8006d30:	08006d4d 	.word	0x08006d4d
 8006d34:	08006d4d 	.word	0x08006d4d
 8006d38:	08006d4d 	.word	0x08006d4d
 8006d3c:	08006d4d 	.word	0x08006d4d
 8006d40:	08006d4d 	.word	0x08006d4d
 8006d44:	08006d4d 	.word	0x08006d4d
 8006d48:	08006d4d 	.word	0x08006d4d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006d4c:	bf00      	nop
  }

  return (USBD_OK);
 8006d4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	480f      	ldr	r0, [pc, #60]	@ (8006da8 <CDC_Receive_FS+0x4c>)
 8006d6a:	f7fe fbb7 	bl	80054dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006d6e:	480e      	ldr	r0, [pc, #56]	@ (8006da8 <CDC_Receive_FS+0x4c>)
 8006d70:	f7fe fc12 	bl	8005598 <USBD_CDC_ReceivePacket>
	memset(buffer, '\0', 64);  // clear the buffer
 8006d74:	2240      	movs	r2, #64	@ 0x40
 8006d76:	2100      	movs	r1, #0
 8006d78:	480c      	ldr	r0, [pc, #48]	@ (8006dac <CDC_Receive_FS+0x50>)
 8006d7a:	f000 fc8b 	bl	8007694 <memset>
	uint8_t len = (uint8_t) *Len;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	73fb      	strb	r3, [r7, #15]
	memcpy(buffer, Buf, len);  // copy the data to the buffer
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	461a      	mov	r2, r3
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	4808      	ldr	r0, [pc, #32]	@ (8006dac <CDC_Receive_FS+0x50>)
 8006d8c:	f000 fcb6 	bl	80076fc <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	461a      	mov	r2, r3
 8006d94:	2100      	movs	r1, #0
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fc7c 	bl	8007694 <memset>
  return (USBD_OK);
 8006d9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20000394 	.word	0x20000394
 8006dac:	20000288 	.word	0x20000288

08006db0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8006df8 <CDC_Transmit_FS+0x48>)
 8006dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006dc6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e00b      	b.n	8006dee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006dd6:	887b      	ldrh	r3, [r7, #2]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6879      	ldr	r1, [r7, #4]
 8006ddc:	4806      	ldr	r0, [pc, #24]	@ (8006df8 <CDC_Transmit_FS+0x48>)
 8006dde:	f7fe fb5b 	bl	8005498 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006de2:	4805      	ldr	r0, [pc, #20]	@ (8006df8 <CDC_Transmit_FS+0x48>)
 8006de4:	f7fe fb98 	bl	8005518 <USBD_CDC_TransmitPacket>
 8006de8:	4603      	mov	r3, r0
 8006dea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000394 	.word	0x20000394

08006dfc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	4613      	mov	r3, r2
 8006e08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	371c      	adds	r7, #28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
	...

08006e20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4603      	mov	r3, r0
 8006e28:	6039      	str	r1, [r7, #0]
 8006e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2212      	movs	r2, #18
 8006e30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e32:	4b03      	ldr	r3, [pc, #12]	@ (8006e40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	200000c8 	.word	0x200000c8

08006e44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	6039      	str	r1, [r7, #0]
 8006e4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2204      	movs	r2, #4
 8006e54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e56:	4b03      	ldr	r3, [pc, #12]	@ (8006e64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	200000dc 	.word	0x200000dc

08006e68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	6039      	str	r1, [r7, #0]
 8006e72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d105      	bne.n	8006e86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	4907      	ldr	r1, [pc, #28]	@ (8006e9c <USBD_FS_ProductStrDescriptor+0x34>)
 8006e7e:	4808      	ldr	r0, [pc, #32]	@ (8006ea0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e80:	f7ff fdd6 	bl	8006a30 <USBD_GetString>
 8006e84:	e004      	b.n	8006e90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	4904      	ldr	r1, [pc, #16]	@ (8006e9c <USBD_FS_ProductStrDescriptor+0x34>)
 8006e8a:	4805      	ldr	r0, [pc, #20]	@ (8006ea0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e8c:	f7ff fdd0 	bl	8006a30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e90:	4b02      	ldr	r3, [pc, #8]	@ (8006e9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20000e70 	.word	0x20000e70
 8006ea0:	08007fc8 	.word	0x08007fc8

08006ea4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	4603      	mov	r3, r0
 8006eac:	6039      	str	r1, [r7, #0]
 8006eae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	4904      	ldr	r1, [pc, #16]	@ (8006ec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006eb4:	4804      	ldr	r0, [pc, #16]	@ (8006ec8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006eb6:	f7ff fdbb 	bl	8006a30 <USBD_GetString>
  return USBD_StrDesc;
 8006eba:	4b02      	ldr	r3, [pc, #8]	@ (8006ec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20000e70 	.word	0x20000e70
 8006ec8:	08007fe0 	.word	0x08007fe0

08006ecc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	221a      	movs	r2, #26
 8006edc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006ede:	f000 f843 	bl	8006f68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ee2:	4b02      	ldr	r3, [pc, #8]	@ (8006eec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	200000e0 	.word	0x200000e0

08006ef0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	6039      	str	r1, [r7, #0]
 8006efa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d105      	bne.n	8006f0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	4907      	ldr	r1, [pc, #28]	@ (8006f24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f06:	4808      	ldr	r0, [pc, #32]	@ (8006f28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f08:	f7ff fd92 	bl	8006a30 <USBD_GetString>
 8006f0c:	e004      	b.n	8006f18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	4904      	ldr	r1, [pc, #16]	@ (8006f24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f12:	4805      	ldr	r0, [pc, #20]	@ (8006f28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f14:	f7ff fd8c 	bl	8006a30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f18:	4b02      	ldr	r3, [pc, #8]	@ (8006f24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000e70 	.word	0x20000e70
 8006f28:	08007ff4 	.word	0x08007ff4

08006f2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	6039      	str	r1, [r7, #0]
 8006f36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d105      	bne.n	8006f4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	4907      	ldr	r1, [pc, #28]	@ (8006f60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f42:	4808      	ldr	r0, [pc, #32]	@ (8006f64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f44:	f7ff fd74 	bl	8006a30 <USBD_GetString>
 8006f48:	e004      	b.n	8006f54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	4904      	ldr	r1, [pc, #16]	@ (8006f60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f4e:	4805      	ldr	r0, [pc, #20]	@ (8006f64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f50:	f7ff fd6e 	bl	8006a30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f54:	4b02      	ldr	r3, [pc, #8]	@ (8006f60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000e70 	.word	0x20000e70
 8006f64:	08008000 	.word	0x08008000

08006f68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006fac <Get_SerialNum+0x44>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f74:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb0 <Get_SerialNum+0x48>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb4 <Get_SerialNum+0x4c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4413      	add	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d009      	beq.n	8006fa2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f8e:	2208      	movs	r2, #8
 8006f90:	4909      	ldr	r1, [pc, #36]	@ (8006fb8 <Get_SerialNum+0x50>)
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 f814 	bl	8006fc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f98:	2204      	movs	r2, #4
 8006f9a:	4908      	ldr	r1, [pc, #32]	@ (8006fbc <Get_SerialNum+0x54>)
 8006f9c:	68b8      	ldr	r0, [r7, #8]
 8006f9e:	f000 f80f 	bl	8006fc0 <IntToUnicode>
  }
}
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	1fff7a10 	.word	0x1fff7a10
 8006fb0:	1fff7a14 	.word	0x1fff7a14
 8006fb4:	1fff7a18 	.word	0x1fff7a18
 8006fb8:	200000e2 	.word	0x200000e2
 8006fbc:	200000f2 	.word	0x200000f2

08006fc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	75fb      	strb	r3, [r7, #23]
 8006fd6:	e027      	b.n	8007028 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	0f1b      	lsrs	r3, r3, #28
 8006fdc:	2b09      	cmp	r3, #9
 8006fde:	d80b      	bhi.n	8006ff8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	0f1b      	lsrs	r3, r3, #28
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	4619      	mov	r1, r3
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	440b      	add	r3, r1
 8006ff0:	3230      	adds	r2, #48	@ 0x30
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]
 8006ff6:	e00a      	b.n	800700e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	0f1b      	lsrs	r3, r3, #28
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	4619      	mov	r1, r3
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	440b      	add	r3, r1
 8007008:	3237      	adds	r2, #55	@ 0x37
 800700a:	b2d2      	uxtb	r2, r2
 800700c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	3301      	adds	r3, #1
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	4413      	add	r3, r2
 800701e:	2200      	movs	r2, #0
 8007020:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	3301      	adds	r3, #1
 8007026:	75fb      	strb	r3, [r7, #23]
 8007028:	7dfa      	ldrb	r2, [r7, #23]
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	429a      	cmp	r2, r3
 800702e:	d3d3      	bcc.n	8006fd8 <IntToUnicode+0x18>
  }
}
 8007030:	bf00      	nop
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
	...

08007040 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	@ 0x28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007048:	f107 0314 	add.w	r3, r7, #20
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	605a      	str	r2, [r3, #4]
 8007052:	609a      	str	r2, [r3, #8]
 8007054:	60da      	str	r2, [r3, #12]
 8007056:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007060:	d13a      	bne.n	80070d8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007062:	2300      	movs	r3, #0
 8007064:	613b      	str	r3, [r7, #16]
 8007066:	4b1e      	ldr	r3, [pc, #120]	@ (80070e0 <HAL_PCD_MspInit+0xa0>)
 8007068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706a:	4a1d      	ldr	r2, [pc, #116]	@ (80070e0 <HAL_PCD_MspInit+0xa0>)
 800706c:	f043 0301 	orr.w	r3, r3, #1
 8007070:	6313      	str	r3, [r2, #48]	@ 0x30
 8007072:	4b1b      	ldr	r3, [pc, #108]	@ (80070e0 <HAL_PCD_MspInit+0xa0>)
 8007074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	613b      	str	r3, [r7, #16]
 800707c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800707e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007084:	2302      	movs	r3, #2
 8007086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007088:	2300      	movs	r3, #0
 800708a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800708c:	2303      	movs	r3, #3
 800708e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007090:	230a      	movs	r3, #10
 8007092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007094:	f107 0314 	add.w	r3, r7, #20
 8007098:	4619      	mov	r1, r3
 800709a:	4812      	ldr	r0, [pc, #72]	@ (80070e4 <HAL_PCD_MspInit+0xa4>)
 800709c:	f7fa f840 	bl	8001120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070a0:	4b0f      	ldr	r3, [pc, #60]	@ (80070e0 <HAL_PCD_MspInit+0xa0>)
 80070a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a4:	4a0e      	ldr	r2, [pc, #56]	@ (80070e0 <HAL_PCD_MspInit+0xa0>)
 80070a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070aa:	6353      	str	r3, [r2, #52]	@ 0x34
 80070ac:	2300      	movs	r3, #0
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	4b0b      	ldr	r3, [pc, #44]	@ (80070e0 <HAL_PCD_MspInit+0xa0>)
 80070b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b4:	4a0a      	ldr	r2, [pc, #40]	@ (80070e0 <HAL_PCD_MspInit+0xa0>)
 80070b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80070ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80070bc:	4b08      	ldr	r3, [pc, #32]	@ (80070e0 <HAL_PCD_MspInit+0xa0>)
 80070be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80070c8:	2200      	movs	r2, #0
 80070ca:	2100      	movs	r1, #0
 80070cc:	2043      	movs	r0, #67	@ 0x43
 80070ce:	f7f9 fff0 	bl	80010b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80070d2:	2043      	movs	r0, #67	@ 0x43
 80070d4:	f7fa f809 	bl	80010ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80070d8:	bf00      	nop
 80070da:	3728      	adds	r7, #40	@ 0x28
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40023800 	.word	0x40023800
 80070e4:	40020000 	.word	0x40020000

080070e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f7fe fb33 	bl	800576a <USBD_LL_SetupStage>
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800711e:	78fa      	ldrb	r2, [r7, #3]
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	4619      	mov	r1, r3
 8007136:	f7fe fb6d 	bl	8005814 <USBD_LL_DataOutStage>
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007154:	78fa      	ldrb	r2, [r7, #3]
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	4613      	mov	r3, r2
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	3320      	adds	r3, #32
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	78fb      	ldrb	r3, [r7, #3]
 8007168:	4619      	mov	r1, r3
 800716a:	f7fe fc06 	bl	800597a <USBD_LL_DataInStage>
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe fd40 	bl	8005c0a <USBD_LL_SOF>
}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800719a:	2301      	movs	r3, #1
 800719c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	79db      	ldrb	r3, [r3, #7]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d001      	beq.n	80071aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80071a6:	f7f9 fc55 	bl	8000a54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071b0:	7bfa      	ldrb	r2, [r7, #15]
 80071b2:	4611      	mov	r1, r2
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fe fce4 	bl	8005b82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe fc8c 	bl	8005ade <USBD_LL_Reset>
}
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fcdf 	bl	8005ba2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80071f6:	f043 0301 	orr.w	r3, r3, #1
 80071fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	7adb      	ldrb	r3, [r3, #11]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007204:	4b04      	ldr	r3, [pc, #16]	@ (8007218 <HAL_PCD_SuspendCallback+0x48>)
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	4a03      	ldr	r2, [pc, #12]	@ (8007218 <HAL_PCD_SuspendCallback+0x48>)
 800720a:	f043 0306 	orr.w	r3, r3, #6
 800720e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	e000ed00 	.word	0xe000ed00

0800721c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe fcd5 	bl	8005bda <USBD_LL_Resume>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800724a:	78fa      	ldrb	r2, [r7, #3]
 800724c:	4611      	mov	r1, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe fd2d 	bl	8005cae <USBD_LL_IsoOUTIncomplete>
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800726e:	78fa      	ldrb	r2, [r7, #3]
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fce9 	bl	8005c4a <USBD_LL_IsoINIncomplete>
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe fd3f 	bl	8005d12 <USBD_LL_DevConnected>
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fd3c 	bl	8005d28 <USBD_LL_DevDisconnected>
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d13c      	bne.n	8007342 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80072c8:	4a20      	ldr	r2, [pc, #128]	@ (800734c <USBD_LL_Init+0x94>)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a1e      	ldr	r2, [pc, #120]	@ (800734c <USBD_LL_Init+0x94>)
 80072d4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072d8:	4b1c      	ldr	r3, [pc, #112]	@ (800734c <USBD_LL_Init+0x94>)
 80072da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80072de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80072e0:	4b1a      	ldr	r3, [pc, #104]	@ (800734c <USBD_LL_Init+0x94>)
 80072e2:	2204      	movs	r2, #4
 80072e4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072e6:	4b19      	ldr	r3, [pc, #100]	@ (800734c <USBD_LL_Init+0x94>)
 80072e8:	2202      	movs	r2, #2
 80072ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072ec:	4b17      	ldr	r3, [pc, #92]	@ (800734c <USBD_LL_Init+0x94>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072f2:	4b16      	ldr	r3, [pc, #88]	@ (800734c <USBD_LL_Init+0x94>)
 80072f4:	2202      	movs	r2, #2
 80072f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072f8:	4b14      	ldr	r3, [pc, #80]	@ (800734c <USBD_LL_Init+0x94>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072fe:	4b13      	ldr	r3, [pc, #76]	@ (800734c <USBD_LL_Init+0x94>)
 8007300:	2200      	movs	r2, #0
 8007302:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007304:	4b11      	ldr	r3, [pc, #68]	@ (800734c <USBD_LL_Init+0x94>)
 8007306:	2200      	movs	r2, #0
 8007308:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800730a:	4b10      	ldr	r3, [pc, #64]	@ (800734c <USBD_LL_Init+0x94>)
 800730c:	2200      	movs	r2, #0
 800730e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007310:	4b0e      	ldr	r3, [pc, #56]	@ (800734c <USBD_LL_Init+0x94>)
 8007312:	2200      	movs	r2, #0
 8007314:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007316:	480d      	ldr	r0, [pc, #52]	@ (800734c <USBD_LL_Init+0x94>)
 8007318:	f7fa f886 	bl	8001428 <HAL_PCD_Init>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007322:	f7f9 fb97 	bl	8000a54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007326:	2180      	movs	r1, #128	@ 0x80
 8007328:	4808      	ldr	r0, [pc, #32]	@ (800734c <USBD_LL_Init+0x94>)
 800732a:	f7fb fab2 	bl	8002892 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800732e:	2240      	movs	r2, #64	@ 0x40
 8007330:	2100      	movs	r1, #0
 8007332:	4806      	ldr	r0, [pc, #24]	@ (800734c <USBD_LL_Init+0x94>)
 8007334:	f7fb fa66 	bl	8002804 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007338:	2280      	movs	r2, #128	@ 0x80
 800733a:	2101      	movs	r1, #1
 800733c:	4803      	ldr	r0, [pc, #12]	@ (800734c <USBD_LL_Init+0x94>)
 800733e:	f7fb fa61 	bl	8002804 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20001070 	.word	0x20001070

08007350 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007366:	4618      	mov	r0, r3
 8007368:	f7fa f96d 	bl	8001646 <HAL_PCD_Start>
 800736c:	4603      	mov	r3, r0
 800736e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	4618      	mov	r0, r3
 8007374:	f000 f942 	bl	80075fc <USBD_Get_USB_Status>
 8007378:	4603      	mov	r3, r0
 800737a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800737c:	7bbb      	ldrb	r3, [r7, #14]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	4608      	mov	r0, r1
 8007390:	4611      	mov	r1, r2
 8007392:	461a      	mov	r2, r3
 8007394:	4603      	mov	r3, r0
 8007396:	70fb      	strb	r3, [r7, #3]
 8007398:	460b      	mov	r3, r1
 800739a:	70bb      	strb	r3, [r7, #2]
 800739c:	4613      	mov	r3, r2
 800739e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80073ae:	78bb      	ldrb	r3, [r7, #2]
 80073b0:	883a      	ldrh	r2, [r7, #0]
 80073b2:	78f9      	ldrb	r1, [r7, #3]
 80073b4:	f7fa fe41 	bl	800203a <HAL_PCD_EP_Open>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f91c 	bl	80075fc <USBD_Get_USB_Status>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	460b      	mov	r3, r1
 80073dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073ec:	78fa      	ldrb	r2, [r7, #3]
 80073ee:	4611      	mov	r1, r2
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fa fe8c 	bl	800210e <HAL_PCD_EP_Close>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 f8fd 	bl	80075fc <USBD_Get_USB_Status>
 8007402:	4603      	mov	r3, r0
 8007404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007406:	7bbb      	ldrb	r3, [r7, #14]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f7fa ff44 	bl	80022bc <HAL_PCD_EP_SetStall>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 f8de 	bl	80075fc <USBD_Get_USB_Status>
 8007440:	4603      	mov	r3, r0
 8007442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007444:	7bbb      	ldrb	r3, [r7, #14]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	460b      	mov	r3, r1
 8007458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007468:	78fa      	ldrb	r2, [r7, #3]
 800746a:	4611      	mov	r1, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f7fa ff88 	bl	8002382 <HAL_PCD_EP_ClrStall>
 8007472:	4603      	mov	r3, r0
 8007474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	4618      	mov	r0, r3
 800747a:	f000 f8bf 	bl	80075fc <USBD_Get_USB_Status>
 800747e:	4603      	mov	r3, r0
 8007480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007482:	7bbb      	ldrb	r3, [r7, #14]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800749e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da0b      	bge.n	80074c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074ae:	68f9      	ldr	r1, [r7, #12]
 80074b0:	4613      	mov	r3, r2
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	4413      	add	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	440b      	add	r3, r1
 80074ba:	3316      	adds	r3, #22
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	e00b      	b.n	80074d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074c6:	68f9      	ldr	r1, [r7, #12]
 80074c8:	4613      	mov	r3, r2
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	4413      	add	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	440b      	add	r3, r1
 80074d2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80074d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	4611      	mov	r1, r2
 8007502:	4618      	mov	r0, r3
 8007504:	f7fa fd75 	bl	8001ff2 <HAL_PCD_SetAddress>
 8007508:	4603      	mov	r3, r0
 800750a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 f874 	bl	80075fc <USBD_Get_USB_Status>
 8007514:	4603      	mov	r3, r0
 8007516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007518:	7bbb      	ldrb	r3, [r7, #14]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b086      	sub	sp, #24
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
 800752e:	460b      	mov	r3, r1
 8007530:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007540:	7af9      	ldrb	r1, [r7, #11]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	f7fa fe7f 	bl	8002248 <HAL_PCD_EP_Transmit>
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	4618      	mov	r0, r3
 8007552:	f000 f853 	bl	80075fc <USBD_Get_USB_Status>
 8007556:	4603      	mov	r3, r0
 8007558:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800755a:	7dbb      	ldrb	r3, [r7, #22]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	607a      	str	r2, [r7, #4]
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	460b      	mov	r3, r1
 8007572:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007582:	7af9      	ldrb	r1, [r7, #11]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	f7fa fe0b 	bl	80021a2 <HAL_PCD_EP_Receive>
 800758c:	4603      	mov	r3, r0
 800758e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f832 	bl	80075fc <USBD_Get_USB_Status>
 8007598:	4603      	mov	r3, r0
 800759a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800759c:	7dbb      	ldrb	r3, [r7, #22]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075b8:	78fa      	ldrb	r2, [r7, #3]
 80075ba:	4611      	mov	r1, r2
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fa fe2b 	bl	8002218 <HAL_PCD_EP_GetRxCount>
 80075c2:	4603      	mov	r3, r0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80075d4:	4b03      	ldr	r3, [pc, #12]	@ (80075e4 <USBD_static_malloc+0x18>)
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	20001554 	.word	0x20001554

080075e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]

}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	2b03      	cmp	r3, #3
 800760e:	d817      	bhi.n	8007640 <USBD_Get_USB_Status+0x44>
 8007610:	a201      	add	r2, pc, #4	@ (adr r2, 8007618 <USBD_Get_USB_Status+0x1c>)
 8007612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007616:	bf00      	nop
 8007618:	08007629 	.word	0x08007629
 800761c:	0800762f 	.word	0x0800762f
 8007620:	08007635 	.word	0x08007635
 8007624:	0800763b 	.word	0x0800763b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	73fb      	strb	r3, [r7, #15]
    break;
 800762c:	e00b      	b.n	8007646 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800762e:	2303      	movs	r3, #3
 8007630:	73fb      	strb	r3, [r7, #15]
    break;
 8007632:	e008      	b.n	8007646 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007634:	2301      	movs	r3, #1
 8007636:	73fb      	strb	r3, [r7, #15]
    break;
 8007638:	e005      	b.n	8007646 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800763a:	2303      	movs	r3, #3
 800763c:	73fb      	strb	r3, [r7, #15]
    break;
 800763e:	e002      	b.n	8007646 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007640:	2303      	movs	r3, #3
 8007642:	73fb      	strb	r3, [r7, #15]
    break;
 8007644:	bf00      	nop
  }
  return usb_status;
 8007646:	7bfb      	ldrb	r3, [r7, #15]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <siprintf>:
 8007654:	b40e      	push	{r1, r2, r3}
 8007656:	b500      	push	{lr}
 8007658:	b09c      	sub	sp, #112	@ 0x70
 800765a:	ab1d      	add	r3, sp, #116	@ 0x74
 800765c:	9002      	str	r0, [sp, #8]
 800765e:	9006      	str	r0, [sp, #24]
 8007660:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007664:	4809      	ldr	r0, [pc, #36]	@ (800768c <siprintf+0x38>)
 8007666:	9107      	str	r1, [sp, #28]
 8007668:	9104      	str	r1, [sp, #16]
 800766a:	4909      	ldr	r1, [pc, #36]	@ (8007690 <siprintf+0x3c>)
 800766c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007670:	9105      	str	r1, [sp, #20]
 8007672:	6800      	ldr	r0, [r0, #0]
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	a902      	add	r1, sp, #8
 8007678:	f000 f9a2 	bl	80079c0 <_svfiprintf_r>
 800767c:	9b02      	ldr	r3, [sp, #8]
 800767e:	2200      	movs	r2, #0
 8007680:	701a      	strb	r2, [r3, #0]
 8007682:	b01c      	add	sp, #112	@ 0x70
 8007684:	f85d eb04 	ldr.w	lr, [sp], #4
 8007688:	b003      	add	sp, #12
 800768a:	4770      	bx	lr
 800768c:	200000fc 	.word	0x200000fc
 8007690:	ffff0208 	.word	0xffff0208

08007694 <memset>:
 8007694:	4402      	add	r2, r0
 8007696:	4603      	mov	r3, r0
 8007698:	4293      	cmp	r3, r2
 800769a:	d100      	bne.n	800769e <memset+0xa>
 800769c:	4770      	bx	lr
 800769e:	f803 1b01 	strb.w	r1, [r3], #1
 80076a2:	e7f9      	b.n	8007698 <memset+0x4>

080076a4 <__errno>:
 80076a4:	4b01      	ldr	r3, [pc, #4]	@ (80076ac <__errno+0x8>)
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	200000fc 	.word	0x200000fc

080076b0 <__libc_init_array>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	4d0d      	ldr	r5, [pc, #52]	@ (80076e8 <__libc_init_array+0x38>)
 80076b4:	4c0d      	ldr	r4, [pc, #52]	@ (80076ec <__libc_init_array+0x3c>)
 80076b6:	1b64      	subs	r4, r4, r5
 80076b8:	10a4      	asrs	r4, r4, #2
 80076ba:	2600      	movs	r6, #0
 80076bc:	42a6      	cmp	r6, r4
 80076be:	d109      	bne.n	80076d4 <__libc_init_array+0x24>
 80076c0:	4d0b      	ldr	r5, [pc, #44]	@ (80076f0 <__libc_init_array+0x40>)
 80076c2:	4c0c      	ldr	r4, [pc, #48]	@ (80076f4 <__libc_init_array+0x44>)
 80076c4:	f000 fc66 	bl	8007f94 <_init>
 80076c8:	1b64      	subs	r4, r4, r5
 80076ca:	10a4      	asrs	r4, r4, #2
 80076cc:	2600      	movs	r6, #0
 80076ce:	42a6      	cmp	r6, r4
 80076d0:	d105      	bne.n	80076de <__libc_init_array+0x2e>
 80076d2:	bd70      	pop	{r4, r5, r6, pc}
 80076d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d8:	4798      	blx	r3
 80076da:	3601      	adds	r6, #1
 80076dc:	e7ee      	b.n	80076bc <__libc_init_array+0xc>
 80076de:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e2:	4798      	blx	r3
 80076e4:	3601      	adds	r6, #1
 80076e6:	e7f2      	b.n	80076ce <__libc_init_array+0x1e>
 80076e8:	0800805c 	.word	0x0800805c
 80076ec:	0800805c 	.word	0x0800805c
 80076f0:	0800805c 	.word	0x0800805c
 80076f4:	08008060 	.word	0x08008060

080076f8 <__retarget_lock_acquire_recursive>:
 80076f8:	4770      	bx	lr

080076fa <__retarget_lock_release_recursive>:
 80076fa:	4770      	bx	lr

080076fc <memcpy>:
 80076fc:	440a      	add	r2, r1
 80076fe:	4291      	cmp	r1, r2
 8007700:	f100 33ff 	add.w	r3, r0, #4294967295
 8007704:	d100      	bne.n	8007708 <memcpy+0xc>
 8007706:	4770      	bx	lr
 8007708:	b510      	push	{r4, lr}
 800770a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800770e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007712:	4291      	cmp	r1, r2
 8007714:	d1f9      	bne.n	800770a <memcpy+0xe>
 8007716:	bd10      	pop	{r4, pc}

08007718 <_free_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4605      	mov	r5, r0
 800771c:	2900      	cmp	r1, #0
 800771e:	d041      	beq.n	80077a4 <_free_r+0x8c>
 8007720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007724:	1f0c      	subs	r4, r1, #4
 8007726:	2b00      	cmp	r3, #0
 8007728:	bfb8      	it	lt
 800772a:	18e4      	addlt	r4, r4, r3
 800772c:	f000 f8e0 	bl	80078f0 <__malloc_lock>
 8007730:	4a1d      	ldr	r2, [pc, #116]	@ (80077a8 <_free_r+0x90>)
 8007732:	6813      	ldr	r3, [r2, #0]
 8007734:	b933      	cbnz	r3, 8007744 <_free_r+0x2c>
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	6014      	str	r4, [r2, #0]
 800773a:	4628      	mov	r0, r5
 800773c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007740:	f000 b8dc 	b.w	80078fc <__malloc_unlock>
 8007744:	42a3      	cmp	r3, r4
 8007746:	d908      	bls.n	800775a <_free_r+0x42>
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	1821      	adds	r1, r4, r0
 800774c:	428b      	cmp	r3, r1
 800774e:	bf01      	itttt	eq
 8007750:	6819      	ldreq	r1, [r3, #0]
 8007752:	685b      	ldreq	r3, [r3, #4]
 8007754:	1809      	addeq	r1, r1, r0
 8007756:	6021      	streq	r1, [r4, #0]
 8007758:	e7ed      	b.n	8007736 <_free_r+0x1e>
 800775a:	461a      	mov	r2, r3
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	b10b      	cbz	r3, 8007764 <_free_r+0x4c>
 8007760:	42a3      	cmp	r3, r4
 8007762:	d9fa      	bls.n	800775a <_free_r+0x42>
 8007764:	6811      	ldr	r1, [r2, #0]
 8007766:	1850      	adds	r0, r2, r1
 8007768:	42a0      	cmp	r0, r4
 800776a:	d10b      	bne.n	8007784 <_free_r+0x6c>
 800776c:	6820      	ldr	r0, [r4, #0]
 800776e:	4401      	add	r1, r0
 8007770:	1850      	adds	r0, r2, r1
 8007772:	4283      	cmp	r3, r0
 8007774:	6011      	str	r1, [r2, #0]
 8007776:	d1e0      	bne.n	800773a <_free_r+0x22>
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	6053      	str	r3, [r2, #4]
 800777e:	4408      	add	r0, r1
 8007780:	6010      	str	r0, [r2, #0]
 8007782:	e7da      	b.n	800773a <_free_r+0x22>
 8007784:	d902      	bls.n	800778c <_free_r+0x74>
 8007786:	230c      	movs	r3, #12
 8007788:	602b      	str	r3, [r5, #0]
 800778a:	e7d6      	b.n	800773a <_free_r+0x22>
 800778c:	6820      	ldr	r0, [r4, #0]
 800778e:	1821      	adds	r1, r4, r0
 8007790:	428b      	cmp	r3, r1
 8007792:	bf04      	itt	eq
 8007794:	6819      	ldreq	r1, [r3, #0]
 8007796:	685b      	ldreq	r3, [r3, #4]
 8007798:	6063      	str	r3, [r4, #4]
 800779a:	bf04      	itt	eq
 800779c:	1809      	addeq	r1, r1, r0
 800779e:	6021      	streq	r1, [r4, #0]
 80077a0:	6054      	str	r4, [r2, #4]
 80077a2:	e7ca      	b.n	800773a <_free_r+0x22>
 80077a4:	bd38      	pop	{r3, r4, r5, pc}
 80077a6:	bf00      	nop
 80077a8:	200018b8 	.word	0x200018b8

080077ac <sbrk_aligned>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	4e0f      	ldr	r6, [pc, #60]	@ (80077ec <sbrk_aligned+0x40>)
 80077b0:	460c      	mov	r4, r1
 80077b2:	6831      	ldr	r1, [r6, #0]
 80077b4:	4605      	mov	r5, r0
 80077b6:	b911      	cbnz	r1, 80077be <sbrk_aligned+0x12>
 80077b8:	f000 fba6 	bl	8007f08 <_sbrk_r>
 80077bc:	6030      	str	r0, [r6, #0]
 80077be:	4621      	mov	r1, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	f000 fba1 	bl	8007f08 <_sbrk_r>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	d103      	bne.n	80077d2 <sbrk_aligned+0x26>
 80077ca:	f04f 34ff 	mov.w	r4, #4294967295
 80077ce:	4620      	mov	r0, r4
 80077d0:	bd70      	pop	{r4, r5, r6, pc}
 80077d2:	1cc4      	adds	r4, r0, #3
 80077d4:	f024 0403 	bic.w	r4, r4, #3
 80077d8:	42a0      	cmp	r0, r4
 80077da:	d0f8      	beq.n	80077ce <sbrk_aligned+0x22>
 80077dc:	1a21      	subs	r1, r4, r0
 80077de:	4628      	mov	r0, r5
 80077e0:	f000 fb92 	bl	8007f08 <_sbrk_r>
 80077e4:	3001      	adds	r0, #1
 80077e6:	d1f2      	bne.n	80077ce <sbrk_aligned+0x22>
 80077e8:	e7ef      	b.n	80077ca <sbrk_aligned+0x1e>
 80077ea:	bf00      	nop
 80077ec:	200018b4 	.word	0x200018b4

080077f0 <_malloc_r>:
 80077f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f4:	1ccd      	adds	r5, r1, #3
 80077f6:	f025 0503 	bic.w	r5, r5, #3
 80077fa:	3508      	adds	r5, #8
 80077fc:	2d0c      	cmp	r5, #12
 80077fe:	bf38      	it	cc
 8007800:	250c      	movcc	r5, #12
 8007802:	2d00      	cmp	r5, #0
 8007804:	4606      	mov	r6, r0
 8007806:	db01      	blt.n	800780c <_malloc_r+0x1c>
 8007808:	42a9      	cmp	r1, r5
 800780a:	d904      	bls.n	8007816 <_malloc_r+0x26>
 800780c:	230c      	movs	r3, #12
 800780e:	6033      	str	r3, [r6, #0]
 8007810:	2000      	movs	r0, #0
 8007812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007816:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078ec <_malloc_r+0xfc>
 800781a:	f000 f869 	bl	80078f0 <__malloc_lock>
 800781e:	f8d8 3000 	ldr.w	r3, [r8]
 8007822:	461c      	mov	r4, r3
 8007824:	bb44      	cbnz	r4, 8007878 <_malloc_r+0x88>
 8007826:	4629      	mov	r1, r5
 8007828:	4630      	mov	r0, r6
 800782a:	f7ff ffbf 	bl	80077ac <sbrk_aligned>
 800782e:	1c43      	adds	r3, r0, #1
 8007830:	4604      	mov	r4, r0
 8007832:	d158      	bne.n	80078e6 <_malloc_r+0xf6>
 8007834:	f8d8 4000 	ldr.w	r4, [r8]
 8007838:	4627      	mov	r7, r4
 800783a:	2f00      	cmp	r7, #0
 800783c:	d143      	bne.n	80078c6 <_malloc_r+0xd6>
 800783e:	2c00      	cmp	r4, #0
 8007840:	d04b      	beq.n	80078da <_malloc_r+0xea>
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	4639      	mov	r1, r7
 8007846:	4630      	mov	r0, r6
 8007848:	eb04 0903 	add.w	r9, r4, r3
 800784c:	f000 fb5c 	bl	8007f08 <_sbrk_r>
 8007850:	4581      	cmp	r9, r0
 8007852:	d142      	bne.n	80078da <_malloc_r+0xea>
 8007854:	6821      	ldr	r1, [r4, #0]
 8007856:	1a6d      	subs	r5, r5, r1
 8007858:	4629      	mov	r1, r5
 800785a:	4630      	mov	r0, r6
 800785c:	f7ff ffa6 	bl	80077ac <sbrk_aligned>
 8007860:	3001      	adds	r0, #1
 8007862:	d03a      	beq.n	80078da <_malloc_r+0xea>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	442b      	add	r3, r5
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	f8d8 3000 	ldr.w	r3, [r8]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	bb62      	cbnz	r2, 80078cc <_malloc_r+0xdc>
 8007872:	f8c8 7000 	str.w	r7, [r8]
 8007876:	e00f      	b.n	8007898 <_malloc_r+0xa8>
 8007878:	6822      	ldr	r2, [r4, #0]
 800787a:	1b52      	subs	r2, r2, r5
 800787c:	d420      	bmi.n	80078c0 <_malloc_r+0xd0>
 800787e:	2a0b      	cmp	r2, #11
 8007880:	d917      	bls.n	80078b2 <_malloc_r+0xc2>
 8007882:	1961      	adds	r1, r4, r5
 8007884:	42a3      	cmp	r3, r4
 8007886:	6025      	str	r5, [r4, #0]
 8007888:	bf18      	it	ne
 800788a:	6059      	strne	r1, [r3, #4]
 800788c:	6863      	ldr	r3, [r4, #4]
 800788e:	bf08      	it	eq
 8007890:	f8c8 1000 	streq.w	r1, [r8]
 8007894:	5162      	str	r2, [r4, r5]
 8007896:	604b      	str	r3, [r1, #4]
 8007898:	4630      	mov	r0, r6
 800789a:	f000 f82f 	bl	80078fc <__malloc_unlock>
 800789e:	f104 000b 	add.w	r0, r4, #11
 80078a2:	1d23      	adds	r3, r4, #4
 80078a4:	f020 0007 	bic.w	r0, r0, #7
 80078a8:	1ac2      	subs	r2, r0, r3
 80078aa:	bf1c      	itt	ne
 80078ac:	1a1b      	subne	r3, r3, r0
 80078ae:	50a3      	strne	r3, [r4, r2]
 80078b0:	e7af      	b.n	8007812 <_malloc_r+0x22>
 80078b2:	6862      	ldr	r2, [r4, #4]
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	bf0c      	ite	eq
 80078b8:	f8c8 2000 	streq.w	r2, [r8]
 80078bc:	605a      	strne	r2, [r3, #4]
 80078be:	e7eb      	b.n	8007898 <_malloc_r+0xa8>
 80078c0:	4623      	mov	r3, r4
 80078c2:	6864      	ldr	r4, [r4, #4]
 80078c4:	e7ae      	b.n	8007824 <_malloc_r+0x34>
 80078c6:	463c      	mov	r4, r7
 80078c8:	687f      	ldr	r7, [r7, #4]
 80078ca:	e7b6      	b.n	800783a <_malloc_r+0x4a>
 80078cc:	461a      	mov	r2, r3
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	d1fb      	bne.n	80078cc <_malloc_r+0xdc>
 80078d4:	2300      	movs	r3, #0
 80078d6:	6053      	str	r3, [r2, #4]
 80078d8:	e7de      	b.n	8007898 <_malloc_r+0xa8>
 80078da:	230c      	movs	r3, #12
 80078dc:	6033      	str	r3, [r6, #0]
 80078de:	4630      	mov	r0, r6
 80078e0:	f000 f80c 	bl	80078fc <__malloc_unlock>
 80078e4:	e794      	b.n	8007810 <_malloc_r+0x20>
 80078e6:	6005      	str	r5, [r0, #0]
 80078e8:	e7d6      	b.n	8007898 <_malloc_r+0xa8>
 80078ea:	bf00      	nop
 80078ec:	200018b8 	.word	0x200018b8

080078f0 <__malloc_lock>:
 80078f0:	4801      	ldr	r0, [pc, #4]	@ (80078f8 <__malloc_lock+0x8>)
 80078f2:	f7ff bf01 	b.w	80076f8 <__retarget_lock_acquire_recursive>
 80078f6:	bf00      	nop
 80078f8:	200018b0 	.word	0x200018b0

080078fc <__malloc_unlock>:
 80078fc:	4801      	ldr	r0, [pc, #4]	@ (8007904 <__malloc_unlock+0x8>)
 80078fe:	f7ff befc 	b.w	80076fa <__retarget_lock_release_recursive>
 8007902:	bf00      	nop
 8007904:	200018b0 	.word	0x200018b0

08007908 <__ssputs_r>:
 8007908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800790c:	688e      	ldr	r6, [r1, #8]
 800790e:	461f      	mov	r7, r3
 8007910:	42be      	cmp	r6, r7
 8007912:	680b      	ldr	r3, [r1, #0]
 8007914:	4682      	mov	sl, r0
 8007916:	460c      	mov	r4, r1
 8007918:	4690      	mov	r8, r2
 800791a:	d82d      	bhi.n	8007978 <__ssputs_r+0x70>
 800791c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007920:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007924:	d026      	beq.n	8007974 <__ssputs_r+0x6c>
 8007926:	6965      	ldr	r5, [r4, #20]
 8007928:	6909      	ldr	r1, [r1, #16]
 800792a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800792e:	eba3 0901 	sub.w	r9, r3, r1
 8007932:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007936:	1c7b      	adds	r3, r7, #1
 8007938:	444b      	add	r3, r9
 800793a:	106d      	asrs	r5, r5, #1
 800793c:	429d      	cmp	r5, r3
 800793e:	bf38      	it	cc
 8007940:	461d      	movcc	r5, r3
 8007942:	0553      	lsls	r3, r2, #21
 8007944:	d527      	bpl.n	8007996 <__ssputs_r+0x8e>
 8007946:	4629      	mov	r1, r5
 8007948:	f7ff ff52 	bl	80077f0 <_malloc_r>
 800794c:	4606      	mov	r6, r0
 800794e:	b360      	cbz	r0, 80079aa <__ssputs_r+0xa2>
 8007950:	6921      	ldr	r1, [r4, #16]
 8007952:	464a      	mov	r2, r9
 8007954:	f7ff fed2 	bl	80076fc <memcpy>
 8007958:	89a3      	ldrh	r3, [r4, #12]
 800795a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800795e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007962:	81a3      	strh	r3, [r4, #12]
 8007964:	6126      	str	r6, [r4, #16]
 8007966:	6165      	str	r5, [r4, #20]
 8007968:	444e      	add	r6, r9
 800796a:	eba5 0509 	sub.w	r5, r5, r9
 800796e:	6026      	str	r6, [r4, #0]
 8007970:	60a5      	str	r5, [r4, #8]
 8007972:	463e      	mov	r6, r7
 8007974:	42be      	cmp	r6, r7
 8007976:	d900      	bls.n	800797a <__ssputs_r+0x72>
 8007978:	463e      	mov	r6, r7
 800797a:	6820      	ldr	r0, [r4, #0]
 800797c:	4632      	mov	r2, r6
 800797e:	4641      	mov	r1, r8
 8007980:	f000 faa8 	bl	8007ed4 <memmove>
 8007984:	68a3      	ldr	r3, [r4, #8]
 8007986:	1b9b      	subs	r3, r3, r6
 8007988:	60a3      	str	r3, [r4, #8]
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	4433      	add	r3, r6
 800798e:	6023      	str	r3, [r4, #0]
 8007990:	2000      	movs	r0, #0
 8007992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007996:	462a      	mov	r2, r5
 8007998:	f000 fac6 	bl	8007f28 <_realloc_r>
 800799c:	4606      	mov	r6, r0
 800799e:	2800      	cmp	r0, #0
 80079a0:	d1e0      	bne.n	8007964 <__ssputs_r+0x5c>
 80079a2:	6921      	ldr	r1, [r4, #16]
 80079a4:	4650      	mov	r0, sl
 80079a6:	f7ff feb7 	bl	8007718 <_free_r>
 80079aa:	230c      	movs	r3, #12
 80079ac:	f8ca 3000 	str.w	r3, [sl]
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	f04f 30ff 	mov.w	r0, #4294967295
 80079bc:	e7e9      	b.n	8007992 <__ssputs_r+0x8a>
	...

080079c0 <_svfiprintf_r>:
 80079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	4698      	mov	r8, r3
 80079c6:	898b      	ldrh	r3, [r1, #12]
 80079c8:	061b      	lsls	r3, r3, #24
 80079ca:	b09d      	sub	sp, #116	@ 0x74
 80079cc:	4607      	mov	r7, r0
 80079ce:	460d      	mov	r5, r1
 80079d0:	4614      	mov	r4, r2
 80079d2:	d510      	bpl.n	80079f6 <_svfiprintf_r+0x36>
 80079d4:	690b      	ldr	r3, [r1, #16]
 80079d6:	b973      	cbnz	r3, 80079f6 <_svfiprintf_r+0x36>
 80079d8:	2140      	movs	r1, #64	@ 0x40
 80079da:	f7ff ff09 	bl	80077f0 <_malloc_r>
 80079de:	6028      	str	r0, [r5, #0]
 80079e0:	6128      	str	r0, [r5, #16]
 80079e2:	b930      	cbnz	r0, 80079f2 <_svfiprintf_r+0x32>
 80079e4:	230c      	movs	r3, #12
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ec:	b01d      	add	sp, #116	@ 0x74
 80079ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f2:	2340      	movs	r3, #64	@ 0x40
 80079f4:	616b      	str	r3, [r5, #20]
 80079f6:	2300      	movs	r3, #0
 80079f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80079fa:	2320      	movs	r3, #32
 80079fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a00:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a04:	2330      	movs	r3, #48	@ 0x30
 8007a06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ba4 <_svfiprintf_r+0x1e4>
 8007a0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a0e:	f04f 0901 	mov.w	r9, #1
 8007a12:	4623      	mov	r3, r4
 8007a14:	469a      	mov	sl, r3
 8007a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a1a:	b10a      	cbz	r2, 8007a20 <_svfiprintf_r+0x60>
 8007a1c:	2a25      	cmp	r2, #37	@ 0x25
 8007a1e:	d1f9      	bne.n	8007a14 <_svfiprintf_r+0x54>
 8007a20:	ebba 0b04 	subs.w	fp, sl, r4
 8007a24:	d00b      	beq.n	8007a3e <_svfiprintf_r+0x7e>
 8007a26:	465b      	mov	r3, fp
 8007a28:	4622      	mov	r2, r4
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	4638      	mov	r0, r7
 8007a2e:	f7ff ff6b 	bl	8007908 <__ssputs_r>
 8007a32:	3001      	adds	r0, #1
 8007a34:	f000 80a7 	beq.w	8007b86 <_svfiprintf_r+0x1c6>
 8007a38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a3a:	445a      	add	r2, fp
 8007a3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 809f 	beq.w	8007b86 <_svfiprintf_r+0x1c6>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a52:	f10a 0a01 	add.w	sl, sl, #1
 8007a56:	9304      	str	r3, [sp, #16]
 8007a58:	9307      	str	r3, [sp, #28]
 8007a5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a60:	4654      	mov	r4, sl
 8007a62:	2205      	movs	r2, #5
 8007a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a68:	484e      	ldr	r0, [pc, #312]	@ (8007ba4 <_svfiprintf_r+0x1e4>)
 8007a6a:	f7f8 fbc1 	bl	80001f0 <memchr>
 8007a6e:	9a04      	ldr	r2, [sp, #16]
 8007a70:	b9d8      	cbnz	r0, 8007aaa <_svfiprintf_r+0xea>
 8007a72:	06d0      	lsls	r0, r2, #27
 8007a74:	bf44      	itt	mi
 8007a76:	2320      	movmi	r3, #32
 8007a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a7c:	0711      	lsls	r1, r2, #28
 8007a7e:	bf44      	itt	mi
 8007a80:	232b      	movmi	r3, #43	@ 0x2b
 8007a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a86:	f89a 3000 	ldrb.w	r3, [sl]
 8007a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a8c:	d015      	beq.n	8007aba <_svfiprintf_r+0xfa>
 8007a8e:	9a07      	ldr	r2, [sp, #28]
 8007a90:	4654      	mov	r4, sl
 8007a92:	2000      	movs	r0, #0
 8007a94:	f04f 0c0a 	mov.w	ip, #10
 8007a98:	4621      	mov	r1, r4
 8007a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a9e:	3b30      	subs	r3, #48	@ 0x30
 8007aa0:	2b09      	cmp	r3, #9
 8007aa2:	d94b      	bls.n	8007b3c <_svfiprintf_r+0x17c>
 8007aa4:	b1b0      	cbz	r0, 8007ad4 <_svfiprintf_r+0x114>
 8007aa6:	9207      	str	r2, [sp, #28]
 8007aa8:	e014      	b.n	8007ad4 <_svfiprintf_r+0x114>
 8007aaa:	eba0 0308 	sub.w	r3, r0, r8
 8007aae:	fa09 f303 	lsl.w	r3, r9, r3
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	9304      	str	r3, [sp, #16]
 8007ab6:	46a2      	mov	sl, r4
 8007ab8:	e7d2      	b.n	8007a60 <_svfiprintf_r+0xa0>
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	1d19      	adds	r1, r3, #4
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	9103      	str	r1, [sp, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bfbb      	ittet	lt
 8007ac6:	425b      	neglt	r3, r3
 8007ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8007acc:	9307      	strge	r3, [sp, #28]
 8007ace:	9307      	strlt	r3, [sp, #28]
 8007ad0:	bfb8      	it	lt
 8007ad2:	9204      	strlt	r2, [sp, #16]
 8007ad4:	7823      	ldrb	r3, [r4, #0]
 8007ad6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ad8:	d10a      	bne.n	8007af0 <_svfiprintf_r+0x130>
 8007ada:	7863      	ldrb	r3, [r4, #1]
 8007adc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ade:	d132      	bne.n	8007b46 <_svfiprintf_r+0x186>
 8007ae0:	9b03      	ldr	r3, [sp, #12]
 8007ae2:	1d1a      	adds	r2, r3, #4
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	9203      	str	r2, [sp, #12]
 8007ae8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007aec:	3402      	adds	r4, #2
 8007aee:	9305      	str	r3, [sp, #20]
 8007af0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007bb4 <_svfiprintf_r+0x1f4>
 8007af4:	7821      	ldrb	r1, [r4, #0]
 8007af6:	2203      	movs	r2, #3
 8007af8:	4650      	mov	r0, sl
 8007afa:	f7f8 fb79 	bl	80001f0 <memchr>
 8007afe:	b138      	cbz	r0, 8007b10 <_svfiprintf_r+0x150>
 8007b00:	9b04      	ldr	r3, [sp, #16]
 8007b02:	eba0 000a 	sub.w	r0, r0, sl
 8007b06:	2240      	movs	r2, #64	@ 0x40
 8007b08:	4082      	lsls	r2, r0
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	3401      	adds	r4, #1
 8007b0e:	9304      	str	r3, [sp, #16]
 8007b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b14:	4824      	ldr	r0, [pc, #144]	@ (8007ba8 <_svfiprintf_r+0x1e8>)
 8007b16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b1a:	2206      	movs	r2, #6
 8007b1c:	f7f8 fb68 	bl	80001f0 <memchr>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d036      	beq.n	8007b92 <_svfiprintf_r+0x1d2>
 8007b24:	4b21      	ldr	r3, [pc, #132]	@ (8007bac <_svfiprintf_r+0x1ec>)
 8007b26:	bb1b      	cbnz	r3, 8007b70 <_svfiprintf_r+0x1b0>
 8007b28:	9b03      	ldr	r3, [sp, #12]
 8007b2a:	3307      	adds	r3, #7
 8007b2c:	f023 0307 	bic.w	r3, r3, #7
 8007b30:	3308      	adds	r3, #8
 8007b32:	9303      	str	r3, [sp, #12]
 8007b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b36:	4433      	add	r3, r6
 8007b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b3a:	e76a      	b.n	8007a12 <_svfiprintf_r+0x52>
 8007b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b40:	460c      	mov	r4, r1
 8007b42:	2001      	movs	r0, #1
 8007b44:	e7a8      	b.n	8007a98 <_svfiprintf_r+0xd8>
 8007b46:	2300      	movs	r3, #0
 8007b48:	3401      	adds	r4, #1
 8007b4a:	9305      	str	r3, [sp, #20]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	f04f 0c0a 	mov.w	ip, #10
 8007b52:	4620      	mov	r0, r4
 8007b54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b58:	3a30      	subs	r2, #48	@ 0x30
 8007b5a:	2a09      	cmp	r2, #9
 8007b5c:	d903      	bls.n	8007b66 <_svfiprintf_r+0x1a6>
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0c6      	beq.n	8007af0 <_svfiprintf_r+0x130>
 8007b62:	9105      	str	r1, [sp, #20]
 8007b64:	e7c4      	b.n	8007af0 <_svfiprintf_r+0x130>
 8007b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e7f0      	b.n	8007b52 <_svfiprintf_r+0x192>
 8007b70:	ab03      	add	r3, sp, #12
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	462a      	mov	r2, r5
 8007b76:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb0 <_svfiprintf_r+0x1f0>)
 8007b78:	a904      	add	r1, sp, #16
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	f3af 8000 	nop.w
 8007b80:	1c42      	adds	r2, r0, #1
 8007b82:	4606      	mov	r6, r0
 8007b84:	d1d6      	bne.n	8007b34 <_svfiprintf_r+0x174>
 8007b86:	89ab      	ldrh	r3, [r5, #12]
 8007b88:	065b      	lsls	r3, r3, #25
 8007b8a:	f53f af2d 	bmi.w	80079e8 <_svfiprintf_r+0x28>
 8007b8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b90:	e72c      	b.n	80079ec <_svfiprintf_r+0x2c>
 8007b92:	ab03      	add	r3, sp, #12
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	462a      	mov	r2, r5
 8007b98:	4b05      	ldr	r3, [pc, #20]	@ (8007bb0 <_svfiprintf_r+0x1f0>)
 8007b9a:	a904      	add	r1, sp, #16
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	f000 f879 	bl	8007c94 <_printf_i>
 8007ba2:	e7ed      	b.n	8007b80 <_svfiprintf_r+0x1c0>
 8007ba4:	08008020 	.word	0x08008020
 8007ba8:	0800802a 	.word	0x0800802a
 8007bac:	00000000 	.word	0x00000000
 8007bb0:	08007909 	.word	0x08007909
 8007bb4:	08008026 	.word	0x08008026

08007bb8 <_printf_common>:
 8007bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bbc:	4616      	mov	r6, r2
 8007bbe:	4698      	mov	r8, r3
 8007bc0:	688a      	ldr	r2, [r1, #8]
 8007bc2:	690b      	ldr	r3, [r1, #16]
 8007bc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	bfb8      	it	lt
 8007bcc:	4613      	movlt	r3, r2
 8007bce:	6033      	str	r3, [r6, #0]
 8007bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	b10a      	cbz	r2, 8007bde <_printf_common+0x26>
 8007bda:	3301      	adds	r3, #1
 8007bdc:	6033      	str	r3, [r6, #0]
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	0699      	lsls	r1, r3, #26
 8007be2:	bf42      	ittt	mi
 8007be4:	6833      	ldrmi	r3, [r6, #0]
 8007be6:	3302      	addmi	r3, #2
 8007be8:	6033      	strmi	r3, [r6, #0]
 8007bea:	6825      	ldr	r5, [r4, #0]
 8007bec:	f015 0506 	ands.w	r5, r5, #6
 8007bf0:	d106      	bne.n	8007c00 <_printf_common+0x48>
 8007bf2:	f104 0a19 	add.w	sl, r4, #25
 8007bf6:	68e3      	ldr	r3, [r4, #12]
 8007bf8:	6832      	ldr	r2, [r6, #0]
 8007bfa:	1a9b      	subs	r3, r3, r2
 8007bfc:	42ab      	cmp	r3, r5
 8007bfe:	dc26      	bgt.n	8007c4e <_printf_common+0x96>
 8007c00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c04:	6822      	ldr	r2, [r4, #0]
 8007c06:	3b00      	subs	r3, #0
 8007c08:	bf18      	it	ne
 8007c0a:	2301      	movne	r3, #1
 8007c0c:	0692      	lsls	r2, r2, #26
 8007c0e:	d42b      	bmi.n	8007c68 <_printf_common+0xb0>
 8007c10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c14:	4641      	mov	r1, r8
 8007c16:	4638      	mov	r0, r7
 8007c18:	47c8      	blx	r9
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d01e      	beq.n	8007c5c <_printf_common+0xa4>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	6922      	ldr	r2, [r4, #16]
 8007c22:	f003 0306 	and.w	r3, r3, #6
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	bf02      	ittt	eq
 8007c2a:	68e5      	ldreq	r5, [r4, #12]
 8007c2c:	6833      	ldreq	r3, [r6, #0]
 8007c2e:	1aed      	subeq	r5, r5, r3
 8007c30:	68a3      	ldr	r3, [r4, #8]
 8007c32:	bf0c      	ite	eq
 8007c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c38:	2500      	movne	r5, #0
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	bfc4      	itt	gt
 8007c3e:	1a9b      	subgt	r3, r3, r2
 8007c40:	18ed      	addgt	r5, r5, r3
 8007c42:	2600      	movs	r6, #0
 8007c44:	341a      	adds	r4, #26
 8007c46:	42b5      	cmp	r5, r6
 8007c48:	d11a      	bne.n	8007c80 <_printf_common+0xc8>
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	e008      	b.n	8007c60 <_printf_common+0xa8>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	4652      	mov	r2, sl
 8007c52:	4641      	mov	r1, r8
 8007c54:	4638      	mov	r0, r7
 8007c56:	47c8      	blx	r9
 8007c58:	3001      	adds	r0, #1
 8007c5a:	d103      	bne.n	8007c64 <_printf_common+0xac>
 8007c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c64:	3501      	adds	r5, #1
 8007c66:	e7c6      	b.n	8007bf6 <_printf_common+0x3e>
 8007c68:	18e1      	adds	r1, r4, r3
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	2030      	movs	r0, #48	@ 0x30
 8007c6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c72:	4422      	add	r2, r4
 8007c74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	e7c7      	b.n	8007c10 <_printf_common+0x58>
 8007c80:	2301      	movs	r3, #1
 8007c82:	4622      	mov	r2, r4
 8007c84:	4641      	mov	r1, r8
 8007c86:	4638      	mov	r0, r7
 8007c88:	47c8      	blx	r9
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d0e6      	beq.n	8007c5c <_printf_common+0xa4>
 8007c8e:	3601      	adds	r6, #1
 8007c90:	e7d9      	b.n	8007c46 <_printf_common+0x8e>
	...

08007c94 <_printf_i>:
 8007c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	7e0f      	ldrb	r7, [r1, #24]
 8007c9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c9c:	2f78      	cmp	r7, #120	@ 0x78
 8007c9e:	4691      	mov	r9, r2
 8007ca0:	4680      	mov	r8, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	469a      	mov	sl, r3
 8007ca6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007caa:	d807      	bhi.n	8007cbc <_printf_i+0x28>
 8007cac:	2f62      	cmp	r7, #98	@ 0x62
 8007cae:	d80a      	bhi.n	8007cc6 <_printf_i+0x32>
 8007cb0:	2f00      	cmp	r7, #0
 8007cb2:	f000 80d2 	beq.w	8007e5a <_printf_i+0x1c6>
 8007cb6:	2f58      	cmp	r7, #88	@ 0x58
 8007cb8:	f000 80b9 	beq.w	8007e2e <_printf_i+0x19a>
 8007cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cc4:	e03a      	b.n	8007d3c <_printf_i+0xa8>
 8007cc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007cca:	2b15      	cmp	r3, #21
 8007ccc:	d8f6      	bhi.n	8007cbc <_printf_i+0x28>
 8007cce:	a101      	add	r1, pc, #4	@ (adr r1, 8007cd4 <_printf_i+0x40>)
 8007cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cd4:	08007d2d 	.word	0x08007d2d
 8007cd8:	08007d41 	.word	0x08007d41
 8007cdc:	08007cbd 	.word	0x08007cbd
 8007ce0:	08007cbd 	.word	0x08007cbd
 8007ce4:	08007cbd 	.word	0x08007cbd
 8007ce8:	08007cbd 	.word	0x08007cbd
 8007cec:	08007d41 	.word	0x08007d41
 8007cf0:	08007cbd 	.word	0x08007cbd
 8007cf4:	08007cbd 	.word	0x08007cbd
 8007cf8:	08007cbd 	.word	0x08007cbd
 8007cfc:	08007cbd 	.word	0x08007cbd
 8007d00:	08007e41 	.word	0x08007e41
 8007d04:	08007d6b 	.word	0x08007d6b
 8007d08:	08007dfb 	.word	0x08007dfb
 8007d0c:	08007cbd 	.word	0x08007cbd
 8007d10:	08007cbd 	.word	0x08007cbd
 8007d14:	08007e63 	.word	0x08007e63
 8007d18:	08007cbd 	.word	0x08007cbd
 8007d1c:	08007d6b 	.word	0x08007d6b
 8007d20:	08007cbd 	.word	0x08007cbd
 8007d24:	08007cbd 	.word	0x08007cbd
 8007d28:	08007e03 	.word	0x08007e03
 8007d2c:	6833      	ldr	r3, [r6, #0]
 8007d2e:	1d1a      	adds	r2, r3, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6032      	str	r2, [r6, #0]
 8007d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e09d      	b.n	8007e7c <_printf_i+0x1e8>
 8007d40:	6833      	ldr	r3, [r6, #0]
 8007d42:	6820      	ldr	r0, [r4, #0]
 8007d44:	1d19      	adds	r1, r3, #4
 8007d46:	6031      	str	r1, [r6, #0]
 8007d48:	0606      	lsls	r6, r0, #24
 8007d4a:	d501      	bpl.n	8007d50 <_printf_i+0xbc>
 8007d4c:	681d      	ldr	r5, [r3, #0]
 8007d4e:	e003      	b.n	8007d58 <_printf_i+0xc4>
 8007d50:	0645      	lsls	r5, r0, #25
 8007d52:	d5fb      	bpl.n	8007d4c <_printf_i+0xb8>
 8007d54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d58:	2d00      	cmp	r5, #0
 8007d5a:	da03      	bge.n	8007d64 <_printf_i+0xd0>
 8007d5c:	232d      	movs	r3, #45	@ 0x2d
 8007d5e:	426d      	negs	r5, r5
 8007d60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d64:	4859      	ldr	r0, [pc, #356]	@ (8007ecc <_printf_i+0x238>)
 8007d66:	230a      	movs	r3, #10
 8007d68:	e011      	b.n	8007d8e <_printf_i+0xfa>
 8007d6a:	6821      	ldr	r1, [r4, #0]
 8007d6c:	6833      	ldr	r3, [r6, #0]
 8007d6e:	0608      	lsls	r0, r1, #24
 8007d70:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d74:	d402      	bmi.n	8007d7c <_printf_i+0xe8>
 8007d76:	0649      	lsls	r1, r1, #25
 8007d78:	bf48      	it	mi
 8007d7a:	b2ad      	uxthmi	r5, r5
 8007d7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d7e:	4853      	ldr	r0, [pc, #332]	@ (8007ecc <_printf_i+0x238>)
 8007d80:	6033      	str	r3, [r6, #0]
 8007d82:	bf14      	ite	ne
 8007d84:	230a      	movne	r3, #10
 8007d86:	2308      	moveq	r3, #8
 8007d88:	2100      	movs	r1, #0
 8007d8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d8e:	6866      	ldr	r6, [r4, #4]
 8007d90:	60a6      	str	r6, [r4, #8]
 8007d92:	2e00      	cmp	r6, #0
 8007d94:	bfa2      	ittt	ge
 8007d96:	6821      	ldrge	r1, [r4, #0]
 8007d98:	f021 0104 	bicge.w	r1, r1, #4
 8007d9c:	6021      	strge	r1, [r4, #0]
 8007d9e:	b90d      	cbnz	r5, 8007da4 <_printf_i+0x110>
 8007da0:	2e00      	cmp	r6, #0
 8007da2:	d04b      	beq.n	8007e3c <_printf_i+0x1a8>
 8007da4:	4616      	mov	r6, r2
 8007da6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007daa:	fb03 5711 	mls	r7, r3, r1, r5
 8007dae:	5dc7      	ldrb	r7, [r0, r7]
 8007db0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007db4:	462f      	mov	r7, r5
 8007db6:	42bb      	cmp	r3, r7
 8007db8:	460d      	mov	r5, r1
 8007dba:	d9f4      	bls.n	8007da6 <_printf_i+0x112>
 8007dbc:	2b08      	cmp	r3, #8
 8007dbe:	d10b      	bne.n	8007dd8 <_printf_i+0x144>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	07df      	lsls	r7, r3, #31
 8007dc4:	d508      	bpl.n	8007dd8 <_printf_i+0x144>
 8007dc6:	6923      	ldr	r3, [r4, #16]
 8007dc8:	6861      	ldr	r1, [r4, #4]
 8007dca:	4299      	cmp	r1, r3
 8007dcc:	bfde      	ittt	le
 8007dce:	2330      	movle	r3, #48	@ 0x30
 8007dd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007dd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007dd8:	1b92      	subs	r2, r2, r6
 8007dda:	6122      	str	r2, [r4, #16]
 8007ddc:	f8cd a000 	str.w	sl, [sp]
 8007de0:	464b      	mov	r3, r9
 8007de2:	aa03      	add	r2, sp, #12
 8007de4:	4621      	mov	r1, r4
 8007de6:	4640      	mov	r0, r8
 8007de8:	f7ff fee6 	bl	8007bb8 <_printf_common>
 8007dec:	3001      	adds	r0, #1
 8007dee:	d14a      	bne.n	8007e86 <_printf_i+0x1f2>
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	b004      	add	sp, #16
 8007df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	f043 0320 	orr.w	r3, r3, #32
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	4833      	ldr	r0, [pc, #204]	@ (8007ed0 <_printf_i+0x23c>)
 8007e04:	2778      	movs	r7, #120	@ 0x78
 8007e06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	6831      	ldr	r1, [r6, #0]
 8007e0e:	061f      	lsls	r7, r3, #24
 8007e10:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e14:	d402      	bmi.n	8007e1c <_printf_i+0x188>
 8007e16:	065f      	lsls	r7, r3, #25
 8007e18:	bf48      	it	mi
 8007e1a:	b2ad      	uxthmi	r5, r5
 8007e1c:	6031      	str	r1, [r6, #0]
 8007e1e:	07d9      	lsls	r1, r3, #31
 8007e20:	bf44      	itt	mi
 8007e22:	f043 0320 	orrmi.w	r3, r3, #32
 8007e26:	6023      	strmi	r3, [r4, #0]
 8007e28:	b11d      	cbz	r5, 8007e32 <_printf_i+0x19e>
 8007e2a:	2310      	movs	r3, #16
 8007e2c:	e7ac      	b.n	8007d88 <_printf_i+0xf4>
 8007e2e:	4827      	ldr	r0, [pc, #156]	@ (8007ecc <_printf_i+0x238>)
 8007e30:	e7e9      	b.n	8007e06 <_printf_i+0x172>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	f023 0320 	bic.w	r3, r3, #32
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	e7f6      	b.n	8007e2a <_printf_i+0x196>
 8007e3c:	4616      	mov	r6, r2
 8007e3e:	e7bd      	b.n	8007dbc <_printf_i+0x128>
 8007e40:	6833      	ldr	r3, [r6, #0]
 8007e42:	6825      	ldr	r5, [r4, #0]
 8007e44:	6961      	ldr	r1, [r4, #20]
 8007e46:	1d18      	adds	r0, r3, #4
 8007e48:	6030      	str	r0, [r6, #0]
 8007e4a:	062e      	lsls	r6, r5, #24
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	d501      	bpl.n	8007e54 <_printf_i+0x1c0>
 8007e50:	6019      	str	r1, [r3, #0]
 8007e52:	e002      	b.n	8007e5a <_printf_i+0x1c6>
 8007e54:	0668      	lsls	r0, r5, #25
 8007e56:	d5fb      	bpl.n	8007e50 <_printf_i+0x1bc>
 8007e58:	8019      	strh	r1, [r3, #0]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	6123      	str	r3, [r4, #16]
 8007e5e:	4616      	mov	r6, r2
 8007e60:	e7bc      	b.n	8007ddc <_printf_i+0x148>
 8007e62:	6833      	ldr	r3, [r6, #0]
 8007e64:	1d1a      	adds	r2, r3, #4
 8007e66:	6032      	str	r2, [r6, #0]
 8007e68:	681e      	ldr	r6, [r3, #0]
 8007e6a:	6862      	ldr	r2, [r4, #4]
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7f8 f9be 	bl	80001f0 <memchr>
 8007e74:	b108      	cbz	r0, 8007e7a <_printf_i+0x1e6>
 8007e76:	1b80      	subs	r0, r0, r6
 8007e78:	6060      	str	r0, [r4, #4]
 8007e7a:	6863      	ldr	r3, [r4, #4]
 8007e7c:	6123      	str	r3, [r4, #16]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e84:	e7aa      	b.n	8007ddc <_printf_i+0x148>
 8007e86:	6923      	ldr	r3, [r4, #16]
 8007e88:	4632      	mov	r2, r6
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	47d0      	blx	sl
 8007e90:	3001      	adds	r0, #1
 8007e92:	d0ad      	beq.n	8007df0 <_printf_i+0x15c>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	079b      	lsls	r3, r3, #30
 8007e98:	d413      	bmi.n	8007ec2 <_printf_i+0x22e>
 8007e9a:	68e0      	ldr	r0, [r4, #12]
 8007e9c:	9b03      	ldr	r3, [sp, #12]
 8007e9e:	4298      	cmp	r0, r3
 8007ea0:	bfb8      	it	lt
 8007ea2:	4618      	movlt	r0, r3
 8007ea4:	e7a6      	b.n	8007df4 <_printf_i+0x160>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4632      	mov	r2, r6
 8007eaa:	4649      	mov	r1, r9
 8007eac:	4640      	mov	r0, r8
 8007eae:	47d0      	blx	sl
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d09d      	beq.n	8007df0 <_printf_i+0x15c>
 8007eb4:	3501      	adds	r5, #1
 8007eb6:	68e3      	ldr	r3, [r4, #12]
 8007eb8:	9903      	ldr	r1, [sp, #12]
 8007eba:	1a5b      	subs	r3, r3, r1
 8007ebc:	42ab      	cmp	r3, r5
 8007ebe:	dcf2      	bgt.n	8007ea6 <_printf_i+0x212>
 8007ec0:	e7eb      	b.n	8007e9a <_printf_i+0x206>
 8007ec2:	2500      	movs	r5, #0
 8007ec4:	f104 0619 	add.w	r6, r4, #25
 8007ec8:	e7f5      	b.n	8007eb6 <_printf_i+0x222>
 8007eca:	bf00      	nop
 8007ecc:	08008031 	.word	0x08008031
 8007ed0:	08008042 	.word	0x08008042

08007ed4 <memmove>:
 8007ed4:	4288      	cmp	r0, r1
 8007ed6:	b510      	push	{r4, lr}
 8007ed8:	eb01 0402 	add.w	r4, r1, r2
 8007edc:	d902      	bls.n	8007ee4 <memmove+0x10>
 8007ede:	4284      	cmp	r4, r0
 8007ee0:	4623      	mov	r3, r4
 8007ee2:	d807      	bhi.n	8007ef4 <memmove+0x20>
 8007ee4:	1e43      	subs	r3, r0, #1
 8007ee6:	42a1      	cmp	r1, r4
 8007ee8:	d008      	beq.n	8007efc <memmove+0x28>
 8007eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ef2:	e7f8      	b.n	8007ee6 <memmove+0x12>
 8007ef4:	4402      	add	r2, r0
 8007ef6:	4601      	mov	r1, r0
 8007ef8:	428a      	cmp	r2, r1
 8007efa:	d100      	bne.n	8007efe <memmove+0x2a>
 8007efc:	bd10      	pop	{r4, pc}
 8007efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f06:	e7f7      	b.n	8007ef8 <memmove+0x24>

08007f08 <_sbrk_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4d06      	ldr	r5, [pc, #24]	@ (8007f24 <_sbrk_r+0x1c>)
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	4604      	mov	r4, r0
 8007f10:	4608      	mov	r0, r1
 8007f12:	602b      	str	r3, [r5, #0]
 8007f14:	f7f8 feea 	bl	8000cec <_sbrk>
 8007f18:	1c43      	adds	r3, r0, #1
 8007f1a:	d102      	bne.n	8007f22 <_sbrk_r+0x1a>
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	b103      	cbz	r3, 8007f22 <_sbrk_r+0x1a>
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	bd38      	pop	{r3, r4, r5, pc}
 8007f24:	200018ac 	.word	0x200018ac

08007f28 <_realloc_r>:
 8007f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2c:	4680      	mov	r8, r0
 8007f2e:	4615      	mov	r5, r2
 8007f30:	460c      	mov	r4, r1
 8007f32:	b921      	cbnz	r1, 8007f3e <_realloc_r+0x16>
 8007f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f38:	4611      	mov	r1, r2
 8007f3a:	f7ff bc59 	b.w	80077f0 <_malloc_r>
 8007f3e:	b92a      	cbnz	r2, 8007f4c <_realloc_r+0x24>
 8007f40:	f7ff fbea 	bl	8007718 <_free_r>
 8007f44:	2400      	movs	r4, #0
 8007f46:	4620      	mov	r0, r4
 8007f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f4c:	f000 f81a 	bl	8007f84 <_malloc_usable_size_r>
 8007f50:	4285      	cmp	r5, r0
 8007f52:	4606      	mov	r6, r0
 8007f54:	d802      	bhi.n	8007f5c <_realloc_r+0x34>
 8007f56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f5a:	d8f4      	bhi.n	8007f46 <_realloc_r+0x1e>
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	4640      	mov	r0, r8
 8007f60:	f7ff fc46 	bl	80077f0 <_malloc_r>
 8007f64:	4607      	mov	r7, r0
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d0ec      	beq.n	8007f44 <_realloc_r+0x1c>
 8007f6a:	42b5      	cmp	r5, r6
 8007f6c:	462a      	mov	r2, r5
 8007f6e:	4621      	mov	r1, r4
 8007f70:	bf28      	it	cs
 8007f72:	4632      	movcs	r2, r6
 8007f74:	f7ff fbc2 	bl	80076fc <memcpy>
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	f7ff fbcc 	bl	8007718 <_free_r>
 8007f80:	463c      	mov	r4, r7
 8007f82:	e7e0      	b.n	8007f46 <_realloc_r+0x1e>

08007f84 <_malloc_usable_size_r>:
 8007f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f88:	1f18      	subs	r0, r3, #4
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	bfbc      	itt	lt
 8007f8e:	580b      	ldrlt	r3, [r1, r0]
 8007f90:	18c0      	addlt	r0, r0, r3
 8007f92:	4770      	bx	lr

08007f94 <_init>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	bf00      	nop
 8007f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9a:	bc08      	pop	{r3}
 8007f9c:	469e      	mov	lr, r3
 8007f9e:	4770      	bx	lr

08007fa0 <_fini>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	bf00      	nop
 8007fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa6:	bc08      	pop	{r3}
 8007fa8:	469e      	mov	lr, r3
 8007faa:	4770      	bx	lr
